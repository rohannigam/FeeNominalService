# Surcharge Provider Endpoints

## Overview
This document covers all endpoints related to managing surcharge providers in the system. These endpoints allow for creating, retrieving, updating, and managing surcharge provider configurations with merchant-specific access control.

---

## Provider Code Standardization
- Provider codes must follow the pattern `{PROVIDER_NAME}_{ENV}_{UNIQUE_ID}` (e.g., `INTERPAYMENTS_PROD_001`).
- Codes must be uppercase, use underscores, and be unique per merchant.
- See implementation notes for validation rules.

---

## Validation System & Error Codes
- All credential schema and configuration validation is now environment-configurable (see appsettings).
- Validation is stricter in production; limits and rules are documented in CredentialsSchemaDocumentation.md.
- All error responses include a structured error code and detailed error messages for easier troubleshooting.
- See CredentialsSchemaDocumentation.md for real-world error/validation examples.

---

## Status Code Management
- **Create Requests**: `statusCode` field is **NOT allowed** in create requests. All new providers are created with `ACTIVE` status by default.
- **Update Requests**: `statusCode` field is **optional** and supports: `"ACTIVE"`, `"INACTIVE"`, `"DELETED"`, `"SUSPENDED"`.
- **Status Validation**: Invalid status codes return `400 Bad Request` with specific error message.
- **Status Transitions**: Currently no restrictions on status transitions (future enhancement planned).

---

## Credentials Schema Validation
- **Create Requests**: `credentialsSchema` is **REQUIRED** and must be a valid, non-empty JSON object.
- **Update Requests**: `credentialsSchema` is **OPTIONAL**. If not provided, existing schema is preserved.
- **Schema Structure**: Must contain `name`, `description`, and `required_fields` properties.
- **Empty Schema Check**: Empty objects `{}` or `null` values are rejected.
- **Field Validation**: All fields are validated against configurable limits (see validation settings).

---

## Configuration Validation
- **Optional**: Configuration is optional for both create and update requests.
- **Name Required**: If configuration is provided, `configName` is required.
- **Credentials Validation**: If credentials are provided, they are validated against the schema.
- **Limits**: All configuration values are validated against configurable limits.

---

## Optional/Nullable Fields
- All fields in `configuration.credentials` and `credentialsSchema` can be optional/null if not required by the provider.
- Only provided fields are included in requests to providers (e.g., Interpayments).
- Unnecessary validation (e.g., TotalAmount > 0) has been removed from the service layer.

---

## Schema Changes Reference
- For all schema changes, see migration scripts in `/Data/Evolve/1.0.0/`.

---

## Deprecated Endpoints
- Any endpoints not listed in this document are considered deprecated and should not be used for new integrations.

---

## Base Endpoint
`/api/v1/merchants/{merchantId}/surcharge-providers`

## Security Considerations
- Requires valid API key authentication
- Request must include valid timestamp and nonce
- Merchant ID in URL must match authenticated merchant
- Rate limiting applies based on merchant's plan
- All sensitive data is encrypted at rest
- Provider credentials are stored securely
- Access is logged in audit trail

## Common Request Headers (Required)
1. `X-Merchant-ID`: Merchant ID (must match URL parameter)
2. `X-Timestamp`: Current UTC timestamp (e.g., "2024-03-20T10:30:00Z")
3. `X-Nonce`: Unique string for request (e.g., GUID)
4. `X-API-Key`: Valid API key for authentication
5. `X-Signature`: HMAC-SHA256 signature of the request

## Important Notes
- **Merchant Isolation:** Each merchant can only access their own surcharge providers
- **Header Validation:** All required headers are validated in a case-insensitive manner
- **Credential Security:** Provider credentials are stored securely and included in responses
- **Soft Delete:** Providers are soft deleted (status changed to "DELETED") rather than hard deleted
- **Status Code:** The `statusCode` field is **NOT allowed** in create requests, **optional** in update requests

## Validation Limits & Settings
The following limits are configurable via `SurchargeProviderValidationSettings`:

### Schema Validation Limits
- **Max Schema Name Length**: 100 characters
- **Max Schema Description Length**: 500 characters
- **Max Schema Object Size**: 10,000 characters (JSON string length)
- **Max Required Fields**: 20 fields
- **Max Optional Fields**: 10 fields

### Field Validation Limits
- **Max Field Name Length**: 100 characters
- **Max Field Description Length**: 500 characters
- **Max Credential Value Length**: 10,000 characters
- **Max Credentials Object Size**: 50,000 characters (JSON string length)

### Provider Limits
- **Max Providers Per Merchant**: 25 providers
- **Max Configuration Name Length**: 100 characters

### Configuration Limits
- **Max Timeout**: 300 seconds
- **Max Retry Count**: 10
- **Max Retry Delay**: 60 seconds
- **Max Rate Limit**: 10,000 requests
- **Max Rate Limit Period**: 3,600 seconds

### Supported Field Types
- `string`, `number`, `integer`, `boolean`, `email`, `url`, `password`
- `jwt`, `api_key`, `client_id`, `client_secret`, `access_token`, `refresh_token`
- `username`, `certificate`, `private_key`, `public_key`, `base64`, `json`

## Endpoints

### 1. Create Surcharge Provider
**POST** `/api/v1/merchants/{merchantId}/surcharge-providers`

#### Request Body
```json
{
    "name": "string",                // Required, max 100 chars
    "code": "string",                // Required, max 50 chars, unique per merchant
    "description": "string",         // Optional, max 500 chars
    "baseUrl": "string",            // Required, max 200 chars
    "authenticationType": "string",  // Required, max 50 chars
    "credentialsSchema": {           // Required, must be valid non-empty object
        "name": "string",           // Required, max 100 chars
        "description": "string",    // Required, max 500 chars
        "required_fields": [        // Required, at least 1 field, max 20 fields
            {
                "name": "string",   // Required, max 100 chars
                "type": "string",   // Required, must be supported type
                "description": "string" // Required, max 500 chars
            }
        ],
        "optional_fields": [        // Optional, max 10 fields
            {
                "name": "string",   // Required, max 100 chars
                "type": "string",   // Required, must be supported type
                "description": "string" // Required, max 500 chars
            }
        ]
    },
    "configuration": {              // Optional
        "configName": "string",     // Required if configuration provided, max 100 chars
        "credentials": {            // Required if configuration provided
            "field_name": "value"   // Must match schema, max 10,000 chars per value
        },
        "timeout": 30,              // Optional, 1-300 seconds
        "retryCount": 3,            // Optional, 0-10
        "retryDelay": 5,            // Optional, 1-60 seconds
        "rateLimit": 1000,          // Optional, 1-10000
        "rateLimitPeriod": 3600,    // Optional, 1-3600 seconds
        "metadata": {}              // Optional, JSON object
    }
}
```

#### Response
```json
{
    "id": "guid",
    "name": "string",
    "code": "string",
    "description": "string",
    "baseUrl": "string",
    "authenticationType": "string",
    "credentialsSchema": {
        "name": "string",
        "description": "string",
        "required_fields": [...],
        "optional_fields": [...]
    },
    "status": "ACTIVE",
    "createdAt": "datetime",
    "updatedAt": "datetime",
    "createdBy": "string",
    "updatedBy": "string",
    "configuration": {
        "id": "guid",
        "configName": "string",
        "isActive": true,
        "isPrimary": true,
        "credentials": {
            "field_name": "value"
        },
        "timeout": 30,
        "retryCount": 3,
        "retryDelay": 5,
        "rateLimit": 1000,
        "rateLimitPeriod": 3600,
        "metadata": {},
        "createdAt": "datetime",
        "updatedAt": "datetime",
        "lastUsedAt": "datetime",
        "lastSuccessAt": "datetime",
        "lastErrorAt": "datetime",
        "lastErrorMessage": "string",
        "successCount": 0,
        "errorCount": 0,
        "averageResponseTime": 150.5
    }
}
```

#### Example: Creating a JWT Provider with Configuration
```bash
curl -X POST "https://api.feenominal.com/api/v1/merchants/MERCHANT001/surcharge-providers" \
  -H "Content-Type: application/json" \
  -H "X-Merchant-ID: MERCHANT001" \
  -H "X-Timestamp: 2024-03-20T10:30:00Z" \
  -H "X-Nonce: 123e4567-e89b-12d3-a456-426614174000" \
  -H "X-API-Key: your-api-key" \
  -H "X-Signature: calculated-signature" \
  -d '{
    "name": "Interpayments Provider",
    "code": "INTERPAY",
    "description": "Interpayments Surcharge Provider",
    "baseUrl": "https://api.interpayments.com/v1",
    "authenticationType": "JWT",
    "credentialsSchema": {
        "name": "Interpayments Credentials",
        "description": "JWT-based authentication for Interpayments API",
        "required_fields": [
            {
                "name": "jwt_token",
                "type": "jwt",
                "description": "JWT token for authentication"
            },
            {
                "name": "client_id",
                "type": "client_id",
                "description": "Client ID for the provider"
            }
        ]
    },
    "configuration": {
        "configName": "Production Config",
        "credentials": {
            "jwt_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "client_id": "interpayments-client-123"
        },
        "timeout": 30,
        "retryCount": 3,
        "retryDelay": 5,
        "rateLimit": 1000,
        "rateLimitPeriod": 3600
    }
}'
```

### 2. Get All Surcharge Providers
**GET** `/api/v1/merchants/{merchantId}/surcharge-providers`

Returns all surcharge providers created by the specified merchant.

#### Response
```json
[
    {
        "id": "guid",
        "name": "string",
        "code": "string",
        "description": "string",
        "baseUrl": "string",
        "authenticationType": "string",
        "credentialsSchema": {...},
        "status": "string",
        "createdAt": "datetime",
        "updatedAt": "datetime",
        "createdBy": "string",
        "updatedBy": "string",
        "configuration": {...}
    }
]
```

#### Example Request
```bash
curl -X GET "https://api.feenominal.com/api/v1/merchants/MERCHANT001/surcharge-providers" \
  -H "X-Merchant-ID: MERCHANT001" \
  -H "X-Timestamp: 2024-03-20T10:30:00Z" \
  -H "X-Nonce: 123e4567-e89b-12d3-a456-426614174000" \
  -H "X-API-Key: your-api-key" \
  -H "X-Signature: calculated-signature"
```

### 3. Get Surcharge Provider by ID
**GET** `/api/v1/merchants/{merchantId}/surcharge-providers/{id}`

Returns a specific surcharge provider by ID. Only returns providers created by the specified merchant.

#### Response
Same format as Create Surcharge Provider response.

#### Example Request
```bash
curl -X GET "https://api.feenominal.com/api/v1/merchants/MERCHANT001/surcharge-providers/123e4567-e89b-12d3-a456-426614174000" \
  -H "X-Merchant-ID: MERCHANT001" \
  -H "X-Timestamp: 2024-03-20T10:30:00Z" \
  -H "X-Nonce: 123e4567-e89b-12d3-a456-426614174000" \
  -H "X-API-Key: your-api-key" \
  -H "X-Signature: calculated-signature"
```

### 4. Update Surcharge Provider
**PUT** `/api/v1/merchants/{merchantId}/surcharge-providers/{id}`

Updates an existing surcharge provider. Only allows updates to providers created by the specified merchant.

#### Request Body
```json
{
    "name": "string",                // Required, max 100 chars
    "code": "string",                // Required, max 50 chars, unique per merchant
    "description": "string",         // Optional, max 500 chars
    "baseUrl": "string",            // Required, max 200 chars
    "authenticationType": "string",  // Required, max 50 chars
    "credentialsSchema": {           // Optional - if not provided, existing schema is preserved
        "name": "string",           // Required if provided, max 100 chars
        "description": "string",    // Required if provided, max 500 chars
        "required_fields": [        // Required if provided, at least 1 field, max 20 fields
            {
                "name": "string",   // Required, max 100 chars
                "type": "string",   // Required, must be supported type
                "description": "string" // Required, max 500 chars
            }
        ],
        "optional_fields": [        // Optional, max 10 fields
            {
                "name": "string",   // Required, max 100 chars
                "type": "string",   // Required, must be supported type
                "description": "string" // Required, max 500 chars
            }
        ]
    },
    "statusCode": "string"          // Optional: "ACTIVE", "INACTIVE", "DELETED", "SUSPENDED"
}
```

#### Response
Same format as Create Surcharge Provider response.

#### Example Request
```bash
curl -X PUT "https://api.feenominal.com/api/v1/merchants/MERCHANT001/surcharge-providers/123e4567-e89b-12d3-a456-426614174000" \
  -H "Content-Type: application/json" \
  -H "X-Merchant-ID: MERCHANT001" \
  -H "X-Timestamp: 2024-03-20T10:30:00Z" \
  -H "X-Nonce: 123e4567-e89b-12d3-a456-426614174000" \
  -H "X-API-Key: your-api-key" \
  -H "X-Signature: calculated-signature" \
  -d '{
    "name": "Updated Interpayments Provider",
    "code": "INTERPAY",
    "description": "Updated Interpayments Configuration",
    "baseUrl": "https://api.interpayments.com/v2",
    "authenticationType": "JWT",
    "credentialsSchema": {
        "name": "Updated Interpayments Credentials",
        "description": "Updated JWT-based authentication for Interpayments API",
        "required_fields": [
            {
                "name": "jwt_token",
                "type": "jwt",
                "description": "JWT token for authentication"
            }
        ]
    },
    "statusCode": "ACTIVE"
  }'
```

### 5. Delete Surcharge Provider (Soft Delete)
**DELETE** `/api/v1/merchants/{merchantId}/surcharge-providers/{id}`

Soft deletes a surcharge provider by setting its status to "DELETED". Only allows deletion of providers created by the specified merchant.

#### Response
```json
{
    "id": "guid",
    "name": "string",
    "code": "string",
    "description": "string",
    "baseUrl": "string",
    "authenticationType": "string",
    "credentialsSchema": {...},
    "status": "DELETED",
    "createdAt": "datetime",
    "updatedAt": "datetime",
    "createdBy": "string",
    "updatedBy": "string",
    "configuration": {...}
}
```

#### Example Request
```bash
curl -X DELETE "https://api.feenominal.com/api/v1/merchants/MERCHANT001/surcharge-providers/123e4567-e89b-12d3-a456-426614174000" \
  -H "X-Merchant-ID: MERCHANT001" \
  -H "X-Timestamp: 2024-03-20T10:30:00Z" \
  -H "X-Nonce: 123e4567-e89b-12d3-a456-426614174000" \
  -H "X-API-Key: your-api-key" \
  -H "X-Signature: calculated-signature"
```

### 6. Restore Surcharge Provider
**POST** `/api/v1/merchants/{merchantId}/surcharge-providers/{id}/restore`

Restores a soft-deleted surcharge provider by setting its status back to "ACTIVE". Only allows restoration of providers created by the specified merchant.

#### Response
```json
{
    "id": "guid",
    "name": "string",
    "code": "string",
    "description": "string",
    "baseUrl": "string",
    "authenticationType": "string",
    "credentialsSchema": {...},
    "status": "ACTIVE",
    "createdAt": "datetime",
    "updatedAt": "datetime",
    "createdBy": "string",
    "updatedBy": "string",
    "configuration": {...}
}
```

#### Example Request
```bash
curl -X POST "https://api.feenominal.com/api/v1/merchants/MERCHANT001/surcharge-providers/123e4567-e89b-12d3-a456-426614174000/restore" \
  -H "X-Merchant-ID: MERCHANT001" \
  -H "X-Timestamp: 2024-03-20T10:30:00Z" \
  -H "X-Nonce: 123e4567-e89b-12d3-a456-426614174000" \
  -H "X-API-Key: your-api-key" \
  -H "X-Signature: calculated-signature"
```

## Error Responses

### 400 Bad Request - Validation Errors
```json
{
    "message": "Invalid credentials schema",
    "errorCode": "SURCH_2005",
    "details": ["Field 'name' is required", "Invalid field type 'invalid_type'"]
}
```

### 400 Bad Request - Status Code Error
```json
{
    "message": "Invalid status code: INVALID_STATUS",
    "errorCode": "SURCH_2003",
    "details": "Status code must be one of: ACTIVE, INACTIVE, DELETED, SUSPENDED"
}
```

### 400 Bad Request - Provider Limit Exceeded
```json
{
    "message": "Provider limit exceeded",
    "errorCode": "SURCH_2011",
    "details": "Maximum 25 providers allowed per merchant"
}
```

### 400 Bad Request - Provider Code Exists
```json
{
    "message": "Provider with code 'INTERPAY' already exists for this merchant",
    "errorCode": "SURCH_2003",
    "details": "Provider codes must be unique per merchant"
}
```

### 401 Unauthorized
```json
{
    "message": "Invalid API key or signature",
    "errorCode": "SURCH_1001",
    "details": "Authentication failed"
}
```

### 403 Forbidden
```json
{
    "message": "Merchant ID in URL does not match authenticated merchant",
    "errorCode": "SURCH_1002",
    "details": "Access denied"
}
```

### 404 Not Found
```json
{
    "message": "Provider with ID 123e4567-e89b-12d3-a456-426614174000 not found",
    "errorCode": "SURCH_2001",
    "details": "Provider not found or access denied"
}
```

### 500 Internal Server Error
```json
{
    "message": "An error occurred while creating the surcharge provider",
    "errorCode": "SURCH_9001",
    "details": "Internal server error"
}
```

## Authentication Types Supported

- **JWT**: JSON Web Token authentication
- **API_KEY**: API key authentication
- **OAUTH2**: OAuth 2.0 authentication
- **BASIC**: Basic authentication

## Field Types Supported

- **string**: Plain text string
- **number**: Numeric value
- **integer**: Integer value
- **boolean**: Boolean value
- **email**: Email address
- **url**: URL
- **password**: Password field
- **jwt**: JWT token
- **api_key**: API key
- **client_id**: Client ID
- **client_secret**: Client secret
- **access_token**: Access token
- **refresh_token**: Refresh token
- **username**: Username
- **certificate**: Certificate
- **private_key**: Private key
- **public_key**: Public key
- **base64**: Base64 encoded data
- **json**: JSON data

## Workflow Diagrams

### Create Surcharge Provider Workflow
```mermaid
sequenceDiagram
    participant Client
    participant API
    participant Auth
    participant Validation
    participant Service
    participant Database
    participant Secrets

    Client->>API: POST /api/v1/merchants/{merchantId}/surcharge-providers
    API->>Auth: Validate API Key & Signature
    Auth-->>API: Authentication Result
    
    alt Authentication Failed
        API-->>Client: 401 Unauthorized
    else Authentication Success
        API->>Validation: Validate Request Headers
        Validation-->>API: Header Validation Result
        
        alt Header Validation Failed
            API-->>Client: 400 Bad Request
        else Header Validation Success
            API->>Validation: Validate Request Body
            Validation-->>API: Body Validation Result
            
            alt Body Validation Failed
                API-->>Client: 400 Bad Request (with errors)
            else Body Validation Success
                API->>Service: Create Provider
                Service->>Database: Check Provider Code Uniqueness
                Database-->>Service: Uniqueness Result
                
                alt Code Already Exists
                    Service-->>API: 409 Conflict
                    API-->>Client: 409 Conflict
                else Code is Unique
                    Service->>Database: Create Provider Record
                    Database-->>Service: Provider Created
                    
                    alt Configuration Provided
                        Service->>Validation: Validate Configuration
                        Validation-->>Service: Configuration Valid
                        Service->>Database: Create Configuration
                        Database-->>Service: Configuration Created
                    end
                    
                    Service->>Secrets: Store Credentials (if provided)
                    Secrets-->>Service: Credentials Stored
                    Service-->>API: Provider with Configuration
                    API-->>Client: 200 OK (Provider Response)
                end
            end
        end
    end
```

### Get All Surcharge Providers Workflow
```mermaid
sequenceDiagram
    participant Client
    participant API
    participant Auth
    participant Service
    participant Database

    Client->>API: GET /api/v1/merchants/{merchantId}/surcharge-providers
    API->>Auth: Validate API Key & Signature
    Auth-->>API: Authentication Result
    
    alt Authentication Failed
        API-->>Client: 401 Unauthorized
    else Authentication Success
        API->>Service: Get Providers by Merchant ID
        Service->>Database: Query Providers for Merchant
        Database-->>Service: Provider List
        Service->>Database: Load Configurations for Providers
        Database-->>Service: Configuration Data
        Service-->>API: Providers with Configurations
        API-->>Client: 200 OK (Provider Array)
    end
```

### Update Surcharge Provider Workflow
```mermaid
sequenceDiagram
    participant Client
    participant API
    participant Auth
    participant Service
    participant Database
    participant Validation

    Client->>API: PUT /api/v1/merchants/{merchantId}/surcharge-providers/{id}
    API->>Auth: Validate API Key & Signature
    Auth-->>API: Authentication Result
    
    alt Authentication Failed
        API-->>Client: 401 Unauthorized
    else Authentication Success
        API->>Service: Get Provider by ID
        Service->>Database: Query Provider
        Database-->>Service: Provider Data
        
        alt Provider Not Found
            Service-->>API: 404 Not Found
            API-->>Client: 404 Not Found
        else Provider Found
            API->>Validation: Validate Merchant Ownership
            Validation-->>API: Ownership Result
            
            alt Wrong Merchant
                API-->>Client: 403 Forbidden
            else Correct Merchant
                API->>Validation: Validate Request Body
                Validation-->>API: Body Validation Result
                
                alt Body Validation Failed
                    API-->>Client: 400 Bad Request
                else Body Validation Success
                    API->>Service: Update Provider
                    Service->>Database: Update Provider Record
                    Database-->>Service: Provider Updated
                    Service-->>API: Updated Provider
                    API-->>Client: 200 OK (Provider Response)
                end
            end
        end
    end
```

### Delete Surcharge Provider Workflow (Soft Delete)
```mermaid
sequenceDiagram
    participant Client
    participant API
    participant Auth
    participant Service
    participant Database

    Client->>API: DELETE /api/v1/merchants/{merchantId}/surcharge-providers/{id}
    API->>Auth: Validate API Key & Signature
    Auth-->>API: Authentication Result
    
    alt Authentication Failed
        API-->>Client: 401 Unauthorized
    else Authentication Success
        API->>Service: Get Provider by ID
        Service->>Database: Query Provider
        Database-->>Service: Provider Data
        
        alt Provider Not Found
            Service-->>API: 404 Not Found
            API-->>Client: 404 Not Found
        else Provider Found
            API->>Service: Validate Merchant Ownership
            Service-->>API: Ownership Result
            
            alt Wrong Merchant
                API-->>Client: 403 Forbidden
            else Correct Merchant
                API->>Service: Soft Delete Provider
                Service->>Database: Update Status to "DELETED"
                Database-->>Service: Provider Soft Deleted
                Service-->>API: Deleted Provider
                API-->>Client: 200 OK (Provider with DELETED status)
            end
        end
    end
```

### Restore Surcharge Provider Workflow
```mermaid
sequenceDiagram
    participant Client
    participant API
    participant Auth
    participant Service
    participant Database

    Client->>API: POST /api/v1/merchants/{merchantId}/surcharge-providers/{id}/restore
    API->>Auth: Validate API Key & Signature
    Auth-->>API: Authentication Result
    
    alt Authentication Failed
        API-->>Client: 401 Unauthorized
    else Authentication Success
        API->>Service: Get Provider by ID (include deleted)
        Service->>Database: Query Provider (include deleted)
        Database-->>Service: Provider Data
        
        alt Provider Not Found
            Service-->>API: 404 Not Found
            API-->>Client: 404 Not Found
        else Provider Found
            API->>Service: Validate Merchant Ownership
            Service-->>API: Ownership Result
            
            alt Wrong Merchant
                API-->>Client: 403 Forbidden
            else Correct Merchant
                API->>Service: Restore Provider
                Service->>Database: Update Status to "ACTIVE"
                Database-->>Service: Provider Restored
                Service-->>API: Restored Provider
                API-->>Client: 200 OK (Provider with ACTIVE status)
            end
        end
    end
```

### Provider Configuration Management Workflow
```mermaid
flowchart TD
    A[Start] --> B{Configuration Provided?}
    B -->|No| C[Create Provider Only]
    B -->|Yes| D[Validate Configuration]
    D --> E{Configuration Valid?}
    E -->|No| F[Return Validation Errors]
    E -->|Yes| G[Create Provider]
    G --> H[Create Configuration]
    H --> I[Store Credentials]
    I --> J[Return Provider with Configuration]
    C --> K[Return Provider Only]
    F --> L[End with Error]
    J --> M[End Success]
    K --> M
```

### Authentication and Authorization Flow
```mermaid
flowchart TD
    A[API Request] --> B[Extract Headers]
    B --> C[Validate X-Merchant-ID]
    C --> D{Merchant ID Valid?}
    D -->|No| E[403 Forbidden]
    D -->|Yes| F[Validate API Key]
    F --> G{API Key Valid?}
    G -->|No| H[401 Unauthorized]
    G -->|Yes| I[Validate Signature]
    I --> J{Signature Valid?}
    J -->|No| H
    J -->|Yes| K[Validate Timestamp]
    K --> L{Timestamp Within Window?}
    L -->|No| M[401 Unauthorized - Expired]
    L -->|Yes| N[Validate Nonce]
    N --> O{Nonce Unique?}
    O -->|No| P[401 Unauthorized - Replay]
    O -->|Yes| Q[Process Request]
    E --> R[End]
    H --> R
    M --> R
    P --> S[End Success]
```

### Error Handling Flow
```mermaid
flowchart TD
    A[Request Received] --> B{Authentication Error?}
    B -->|Yes| C[401 Unauthorized]
    B -->|No| D{Authorization Error?}
    D -->|Yes| E[403 Forbidden]
    D -->|No| F{Validation Error?}
    F -->|Yes| G[400 Bad Request]
    F -->|No| H{Resource Not Found?}
    H -->|Yes| I[404 Not Found]
    H -->|No| J{Conflict Error?}
    J -->|Yes| K[409 Conflict]
    J -->|No| L{Server Error?}
    L -->|Yes| M[500 Internal Server Error]
    L -->|No| N[200 Success]
    
    C --> O[Return Error Response]
    E --> O
    G --> O
    I --> O
    K --> O
    M --> O
    N --> P[Return Success Response]
    O --> Q[End]
    P --> Q
```

### Data Flow Architecture
```mermaid
graph TB
    subgraph "Client Layer"
        A[API Client]
    end
    
    subgraph "API Gateway"
        B[Authentication Middleware]
        C[Rate Limiting]
        D[Request Validation]
    end
    
    subgraph "Application Layer"
        E[SurchargeProviderController]
        F[SurchargeProviderService]
        G[CredentialValidationService]
    end
    
    subgraph "Data Layer"
        H[SurchargeProviderRepository]
        I[SurchargeProviderConfigRepository]
        J[Database]
        K[AWS Secrets Manager]
    end
    
    A --> B
    B --> C
    C --> D
    D --> E
    E --> F
    E --> G
    F --> H
    F --> I
    H --> J
    I --> J
    F --> K
    I --> K
``` 