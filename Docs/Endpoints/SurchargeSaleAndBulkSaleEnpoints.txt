Surcharge Sale and Bulk Sale Endpoints
=====================================

Overview
--------
This document describes the /api/v1/surcharge/sale (single sale) and /api/v1/surcharge/bulk-sale-complete (bulk/admin sale) endpoints, including request/response models, workflows, and usage notes. The endpoints support both merchant-scoped and admin-scoped operations with comprehensive error handling and fee tracking.

Endpoints
---------

1. Single Surcharge Sale
   - URL: POST /api/v1/surcharge/sale
   - Use case: Complete a surcharge sale for a single transaction, either by referencing a previous auth (surchargeTransactionId) or by direct provider info.

2. Bulk Surcharge Sale Complete (Admin/Cross-Merchant)
   - URL: POST /api/v1/surcharge/bulk-sale-complete
   - Use case: Admins or batch jobs complete multiple surcharge sales across merchants/providers in a single request. Supports partial success and detailed per-sale results.

Authentication & Security
-------------------------
- All endpoints require API key authentication and request signing.
- Bulk sale endpoint requires an admin-scope API key with `IsAdmin` claim.
- See API documentation for required headers (X-API-Key, X-Timestamp, X-Nonce, X-Signature, etc).
- Merchant isolation is enforced for single sale operations.
- Cross-merchant operations are supported for bulk sales with admin scope.

Request Models
--------------

Single Sale Request (SurchargeSaleRequest):
-------------------------------------------
- surchargeTransactionId (Guid, optional): If provided, all other fields become optional.
- providerTransactionId (string, optional): Required if surchargeTransactionId is not provided.
- providerCode (string, optional): Required if surchargeTransactionId is not provided.
- providerType (string, optional): Required if surchargeTransactionId is not provided.
- correlationId (string, optional): Required if surchargeTransactionId is not provided.
- merchantTransactionId (string, optional)

**Validation Rules:**
- If `surchargeTransactionId` is provided, all other fields are optional
- If `surchargeTransactionId` is NOT provided, then `correlationId` and `providerCode` are required
- `providerType` is optional and can be looked up if not provided

Example:
```json
{
  "surchargeTransactionId": "b1e2c3d4-e5f6-7890-abcd-1234567890ef"
}
```

Alternative example (using provider info):
```json
{
  "providerTransactionId": "ip-tx-001",
  "providerCode": "INTERPAY",
  "providerType": "INTERPAYMENTS",
  "correlationId": "sale-123456"
}
```

Bulk Sale Complete Request (BulkSaleCompleteRequest):
-----------------------------------------------------
- sales (array of BulkSaleItem): Each item must have either surchargeTransactionId or all of providerTransactionId, providerCode, correlationId.

**BulkSaleItem Fields:**
- surchargeTransactionId (Guid, optional): Preferred method
- providerTransactionId (string, optional): Required if surchargeTransactionId not provided
- providerCode (string, optional): Required if surchargeTransactionId not provided
- correlationId (string, optional): Required if surchargeTransactionId not provided
- providerType (string, optional): Can be looked up if not provided

Example:
```json
{
  "sales": [
    { "surchargeTransactionId": "b1e2c3d4-e5f6-7890-abcd-1234567890ef" },
    { 
      "providerTransactionId": "ip-tx-001", 
      "providerCode": "INTERPAY", 
      "providerType": "INTERPAYMENTS", 
      "correlationId": "sale-123456" 
    }
  ]
}
```

Response Models
---------------

Single Sale Response (SurchargeSaleResponse):
---------------------------------------------
- surchargeTransactionId (Guid): The ID from the request (if provided), or the looked-up transaction.
- originalSurchargeTransactionId (Guid): The root auth transaction in the chain.
- currentSurchargeTransactionId (Guid): The newly generated sale transaction ID.
- correlationId (string)
- merchantTransactionId (string, nullable)
- providerTransactionId (string)
- amount (decimal)
- status (string)
- providerCode (string)
- providerType (string)
- processedAt (datetime)
- surchargeFee (decimal, nullable): Fee amount from the original auth transaction
- surchargeFeePercent (decimal, nullable): Fee percentage from the original auth transaction
- error (object, optional): Error details if the operation failed

Bulk Sale Complete Response (BulkSaleCompleteResponse):
------------------------------------------------------
- batchId (string): System-generated unique batch ID.
- totalCount (int): Number of sales in the request.
- successCount (int): Number of successful sales.
- failureCount (int): Number of failed sales.
- results (array of SurchargeSaleResponse): Per-sale results (see above).
- processedAt (datetime)

Example Response:
-----------------
```json
{
  "batchId": "c9c1668a34b14a7c950b58d4314f6895",
  "totalCount": 2,
  "successCount": 2,
  "failureCount": 0,
  "results": [
    {
      "surchargeTransactionId": "b1e2c3d4-e5f6-7890-abcd-1234567890ef",
      "originalSurchargeTransactionId": "b1e2c3d4-e5f6-7890-abcd-1234567890ef",
      "currentSurchargeTransactionId": "sale-tx-002",
      "correlationId": "sale-123456",
      "merchantTransactionId": "sale-987654",
      "providerTransactionId": "ip-sale-001",
      "amount": 100.00,
      "status": "Completed",
      "providerCode": "INTERPAY",
      "providerType": "INTERPAYMENTS",
      "processedAt": "2025-05-20T04:52:24.803373Z",
      "surchargeFee": 3.50,
      "surchargeFeePercent": 3.5,
      "error": null
    }
  ],
  "processedAt": "2025-05-20T04:52:24.8137133Z"
}
```

Workflow Diagrams
-----------------

Single Sale Workflow:
---------------------

```mermaid
sequenceDiagram
    participant Client
    participant API as FeeNominal API
    participant DB as Database
    participant IP as InterPayments
    
    Client->>API: POST /api/v1/surcharge/sale
    API->>API: Validate request & authenticate
    
    alt surchargeTransactionId provided
        API->>DB: Lookup original auth transaction
        DB-->>API: Return original transaction
    else providerTransactionId provided
        API->>DB: Lookup by provider transaction ID
        DB-->>API: Return original transaction
    end
    
    alt Transaction found
        API->>API: Validate transaction status & amount
        API->>DB: Create new sale transaction
        DB-->>API: Confirm transaction created
        
        API->>IP: POST /sale with transaction details
        IP-->>API: Return sale response
        
        alt Sale successful
            API->>DB: Update transaction with response
            DB-->>API: Confirm transaction updated
            API-->>Client: Return success response
        else Sale failed
            API->>DB: Update transaction with error
            DB-->>API: Confirm transaction updated
            API-->>Client: Return error response
        end
    else Transaction not found
        API-->>Client: Return 400 - Transaction not found
    end
```

Bulk Sale Complete Workflow:
----------------------------

```mermaid
flowchart TD
    A[Admin/Batch Job] --> B[POST /api/v1/surcharge/bulk-sale-complete]
    B --> C{Validate Admin Scope}
    C -->|Invalid| D[Return 403 - Admin access required]
    C -->|Valid| E[Generate unique batchId]
    
    E --> F{UseProviderBulkSale Setting}
    
    F -->|true| G[Provider Bulk Sale Mode]
    F -->|false| H[Parallel Sale Mode]
    
    G --> I[Group sales by provider config]
    I --> J[Create DB transactions for all sales]
    J --> K[Call provider bulk endpoint]
    K --> L[Process bulk response arrays]
    L --> M[Update all transactions]
    
    H --> N[Create SemaphoreSlim for concurrency]
    N --> O[Process sales in parallel]
    O --> P[Wait for all sales to complete]
    P --> Q[Aggregate results and counts]
    
    M --> R[Return BulkSaleCompleteResponse]
    Q --> R
    R --> S[Admin receives batch results]
```

Error Handling Workflow:
------------------------

```mermaid
flowchart TD
    A[Sale Request] --> B{Validate Request}
    B -->|Invalid| C[Return 400 Bad Request]
    B -->|Valid| D{Lookup Original Transaction}
    
    D -->|Not Found| E[Return 400 - Transaction not found]
    D -->|Found| F{Validate Transaction Status}
    
    F -->|Invalid Status| G[Return 400 - Invalid transaction status]
    F -->|Valid| H[Call InterPayments API]
    
    H --> I{InterPayments Response}
    I -->|HTTP Error| J[Log error & return failure]
    I -->|HTTP 200| K{Check Response Status}
    
    K -->|Success| L[Process successful sale]
    K -->|Error| M[Log error & return failure]
    
    L --> N[Create successful sale transaction]
    M --> O[Create failed sale transaction]
    
    N --> P[Return success response]
    O --> Q[Return error response]
```

Error Handling & InterPayments Integration
------------------------------------------

### InterPayments Message Handling
The sale endpoints provide comprehensive handling of InterPayments responses:

#### **Success Responses**
When InterPayments returns a successful response:
- **Creates sale transaction** in the database with complete response details
- **Extracts fee information** from the original auth transaction's response payload
- **Returns success response** with all transaction details and fee information

#### **Error Responses**
When InterPayments returns an error:
- **Logs the error** with transaction details and InterPayments message
- **Creates failed transaction** in the database with error information
- **Returns error response** with structured error details

### Error Response Structure
```json
{
  "surchargeTransactionId": "b1e2c3d4-e5f6-7890-abcd-1234567890ef",
  "originalSurchargeTransactionId": "b1e2c3d4-e5f6-7890-abcd-1234567890ef",
  "currentSurchargeTransactionId": "sale-tx-002",
  "correlationId": "sale-123456",
  "amount": 100.00,
  "status": "Failed",
  "providerCode": "INTERPAYMENTS",
  "providerType": "INTERPAYMENTS",
  "processedAt": "2025-05-20T04:52:24.803373Z",
  "surchargeFee": null,
  "surchargeFeePercent": null,
  "error": {
    "code": "PROVIDER_ERROR",
    "message": "Transaction declined by provider"
  }
}
```

### Bulk Sale Error Handling
- **Partial Success**: Individual sale failures don't affect other sales in the batch
- **Error Isolation**: Each sale is processed independently with its own error handling
- **Batch Continuation**: Failed sales are reported in results array while successful sales complete normally
- **Comprehensive Reporting**: All sales (successful and failed) are included in the response

Configuration
-------------

The bulk sale processing behavior is controlled by the `BulkSaleSettings` configuration section:

```json
{
  "BulkSaleSettings": {
    "UseProviderBulkSale": false,
    "MaxRequestsPerBulkSale": 5000,
    "MaxConcurrency": 10
  }
}
```

**Configuration Options:**
- `UseProviderBulkSale` (bool, default: false): Whether to use provider's bulk endpoint or process individually
- `MaxRequestsPerBulkSale` (int, default: 5000): Maximum number of sales allowed in a single bulk request
- `MaxConcurrency` (int, default: 10): Maximum number of concurrent sales when processing in parallel

**Performance Impact:**
- **Serial Mode** (UseProviderBulkSale=true): Uses provider's bulk endpoint for maximum efficiency
- **Parallel Mode** (UseProviderBulkSale=false): Processes sales concurrently with configurable concurrency limit
  - Default concurrency of 10 provides ~10x performance improvement for large batches
  - Adjust `MaxConcurrency` based on provider rate limits and system resources

Special Behaviors & Notes
-------------------------

**Single Sale:**
- If `surchargeTransactionId` is provided, all other fields are optional and will be looked up from the DB
- If both `surchargeTransactionId` and `providerTransactionId` are provided, `surchargeTransactionId` takes precedence
- The service looks up the latest transaction in the chain for the given ID
- `surchargeFee` and `surchargeFeePercent` are extracted from the original auth transaction's response payload
- `merchantTransactionId` from the original auth transaction takes precedence over the request value
- **Error Handling**: Comprehensive error handling with structured error responses and detailed logging

**Bulk Sale:**
- `batchId` is always system-generated and unique for each request
- Partial success is supported: failed sales are reported in the results array with error details
- **Two Processing Modes**:
  - **Provider Bulk Mode** (`UseProviderBulkSale=true`): Groups sales by provider config, creates DB transactions, then calls provider's bulk endpoint
  - **Parallel Sale Mode** (`UseProviderBulkSale=false`, default): Processes sales concurrently using `Task.WhenAll()` with `SemaphoreSlim` concurrency control
- **Performance Characteristics**:
  - **Small batches (10-50 sales)**: 3-5x faster with parallel processing
  - **Medium batches (100-500 sales)**: 8-10x faster with parallel processing
  - **Large batches (1000+ sales)**: 10-15x faster with parallel processing
- Admin/cross-merchant support: bulk endpoint can process sales for multiple merchants/providers in one batch
- All endpoints return 200 OK with detailed per-sale status, even if some sales fail
- Configuration controlled by `BulkSaleSettings` (defaults to parallel mode with 10 concurrent sales)
- **Error Isolation**: Failed sales don't affect other concurrent sales in the batch

**Provider Integration:**
- Currently supports InterPayments provider for both single and bulk sales
- **Auth Endpoint**: POST {baseUrl} (e.g., https://api-test.interpayments.com/v1/ch) - for initial surcharge calculation
- **Sale Endpoint**: POST {baseUrl}/sale (e.g., https://api-test.interpayments.com/v1/ch/sale) - for completing sales
- **Bulk Sale Endpoint**: POST {baseUrl}/bulk/sale (e.g., https://api-test.interpayments.com/v1/ch/bulk/sale) - **Implemented and working** when UseProviderBulkSale=true
- **Cancel Endpoint**: POST {baseUrl}/cancel (e.g., https://api-test.interpayments.com/v1/ch/cancel) - for cancelling transactions
- **Refund Endpoint**: POST {baseUrl}/refund (e.g., https://api-test.interpayments.com/v1/ch/refund) - for refunding transactions
- **Bulk Sale Modes**:
  - **Provider Bulk Mode** (`UseProviderBulkSale=true`): Groups sales by provider config and calls provider's bulk endpoint
  - **Parallel Sale Mode** (`UseProviderBulkSale=false`, default): Processes each sale concurrently with configurable concurrency limit
- For other providers, bulk sale returns "Bulk sale not implemented for this provider type"
- Provider responses are stored in the database for audit purposes

**Database Transactions:**
- Each sale creates a new `SurchargeTransaction` record with `OperationType.Sale`
- The new transaction is linked to the original auth transaction via `OriginalSurchargeTransId`
- All transactions include audit fields (`CreatedBy`, `UpdatedBy`, `CreatedAt`, `UpdatedAt`)
- **Parallel Safety**: Each concurrent sale has isolated database scope to prevent conflicts
- **Fee Tracking**: Fee information is extracted from original auth transactions and stored in sale transactions

**Error Handling:**
- Invalid requests return 400 Bad Request with specific error messages
- Provider errors are captured and returned in the response with structured error objects
- Database errors are logged and return 500 Internal Server Error
- Authentication/authorization errors return 401/403 as appropriate
- **Parallel Error Isolation**: Failed sales don't affect other concurrent sales
- **Comprehensive Logging**: All errors are logged with sanitized transaction details for debugging

**Concurrency Control:**
- Uses `SemaphoreSlim` to limit concurrent sales to `MaxConcurrency` (default: 10)
- Prevents overwhelming providers with too many simultaneous requests
- Configurable based on provider rate limits and system resources
- Memory usage scales linearly with concurrency level
- **Error Resilience**: Individual sale failures don't impact batch processing

**Fee Transparency:**
- **Fee Extraction**: `surchargeFee` and `surchargeFeePercent` are extracted from original auth transactions
- **Consistent Reporting**: Fee information is consistently reported across all sale responses
- **Audit Trail**: Complete fee tracking for compliance and reporting purposes
- **Provider Integration**: Fee information comes directly from InterPayments responses

Change History
--------------
- v1.0: Initial version (2024-07-22)
- v1.1: Added support for optional surchargeTransactionId, per-sale fee reporting, batchId auto-generation, and admin/cross-merchant bulk sales
- v1.2: Updated validation rules, added Mermaid diagrams, corrected field requirements and workflow descriptions
- v1.3: Implemented parallel processing for bulk sales with configurable concurrency control, added performance characteristics and configuration documentation
- v1.4: Enhanced error handling documentation, added comprehensive InterPayments integration details, improved workflow diagrams, and added fee tracking information

Usage Scenarios
---------------
- Complete a single surcharge sale by referencing a previous auth transaction
- Complete a single surcharge sale using provider transaction information
- Process multiple sales in a single batch for administrative operations
- Handle partial success scenarios in bulk operations
- Track fee information across all sale transactions
- Audit all sale operations with complete transaction history
- Process cross-merchant sales with admin scope permissions

Caveats
-------
- The sale operation is only supported for InterPayments providers in the current implementation
- Sales are only allowed for completed auth transactions
- The system will validate that the sale amount matches the original auth amount
- Bulk sales require admin-scope API keys with proper permissions
- Parallel processing performance depends on provider rate limits and system resources
- Fee information is extracted from original auth transactions, not from sale responses 