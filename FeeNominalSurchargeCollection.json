{
	"info": {
		"_postman_id": "e5eb3124-6602-48ed-a63b-fd722b264032",
		"name": "FeeNominal Surcharge API",
		"description": "Collection for testing the FeeNominal Surcharge API endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32378011",
		"_collection_link": "https://earwig.postman.co/workspace/Earwig-Workspace~76662190-f6bb-4fb6-8065-6fed724ace4b/collection/32378011-e5eb3124-6602-48ed-a63b-fd722b264032?action=share&source=collection_link&creator=32378011"
	},
	"item": [
		{
			"name": "API Key Management (v1)",
			"item": [
				{
					"name": "Initial API Key Generation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate UTC timestamp",
									"const now = new Date();",
									"const utcTimestamp = now.toISOString();",
									"",
									"pm.environment.set('timestamp', utcTimestamp);",
									"",
									"// Generate random nonce",
									"const nonce = Math.random().toString(36).substring(2, 12);",
									"pm.environment.set('nonce', nonce);",
									"",
									"// Generate random 4-digit merchant ID",
									"const randomMerchantId = Math.floor(1000 + Math.random() * 9000).toString();",
									"pm.environment.set('externalMerchantId', randomMerchantId);",
									"",
									"// Generate random merchant name",
									"const adjectives = ['Global', 'Premium', 'Elite', 'Prime', 'Royal', 'Supreme', 'Ultimate', 'Grand', 'Mega', 'Super'];",
									"const nouns = ['Merchant', 'Trading', 'Commerce', 'Retail', 'Business', 'Enterprise', 'Ventures', 'Solutions', 'Services', 'Group'];",
									"const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];",
									"const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];",
									"const randomMerchantName = `${randomAdjective} ${randomNoun} ${randomMerchantId}`;",
									"pm.environment.set('merchantName', randomMerchantName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save API key and secret from response",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"merchantId\", jsonData.merchantId);",
									"pm.environment.set(\"externalMerchantId\", jsonData.externalMerchantId);",
									"pm.environment.set(\"merchantName\", jsonData.merchantName);",
									"pm.environment.set(\"apiKey\", jsonData.apiKey);",
									"pm.environment.set(\"apiSecret\", jsonData.secret);",
									"pm.environment.set(\"apiKeyId\", jsonData.apiKeyId);",
									"pm.environment.set(\"rateLimit\", jsonData.rateLimit);",
									"pm.environment.set(\"allowedEndpoints\", JSON.stringify(jsonData.allowedEndpoints));",
									"pm.environment.set(\"expiresAt\", jsonData.expiresAt);",
									"pm.environment.set(\"createdAt\", jsonData.createdAt);",
									"",
									"// Log all saved values for verification",
									"console.log(\"Saved merchantId: \" + pm.environment.get(\"merchantId\"));",
									"console.log(\"Saved externalMerchantId: \" + pm.environment.get(\"externalMerchantId\"));",
									"console.log(\"Saved merchantName: \" + pm.environment.get(\"merchantName\"));",
									"console.log(\"Saved apiKey: \" + pm.environment.get(\"apiKey\"));",
									"console.log(\"Saved apiSecret: \" + pm.environment.get(\"apiSecret\"));",
									"console.log(\"Saved apiKeyId: \" + pm.environment.get(\"apiKeyId\"));",
									"console.log(\"Saved rateLimit: \" + pm.environment.get(\"rateLimit\"));",
									"console.log(\"Saved allowedEndpoints: \" + pm.environment.get(\"allowedEndpoints\"));",
									"console.log(\"Saved expiresAt: \" + pm.environment.get(\"expiresAt\"));",
									"console.log(\"Saved createdAt: \" + pm.environment.get(\"createdAt\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Timestamp",
								"value": "{{timestamp}}",
								"type": "text"
							},
							{
								"key": "X-Nonce",
								"value": "{{nonce}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"externalMerchantId\": \"{{externalMerchantId}}\",\n    \"merchantName\": \"{{merchantName}}\",\n    \"description\": \"{{apiKeyDescription}}\",\n    \"rateLimit\": {{apiKeyRateLimit}},\n    \"allowedEndpoints\": {{apiKeyAllowedEndpoints}},\n    \"purpose\": \"{{apiKeyPurpose}}\",\n    \"onboardingMetadata\": {\n        \"adminUserId\": \"{{adminUserId}}\",\n        \"onboardingReference\": \"{{onboardingReference}}\",\n        \"onboardingTimestamp\": \"{{timestamp}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/apikey/initial-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"apikey",
								"initial-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate API Key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const timestamp = new Date().toISOString();",
									"const nonce = pm.variables.replaceIn('{{$guid}}');",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment. Please run Initial API Key Generation first.');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment. Please run Initial API Key Generation first.');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment. Please run Initial API Key Generation first.');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const data = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(data, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Log values for debugging",
									"console.log('Using Merchant ID:', merchantId);",
									"console.log('Using API Key:', apiKey);",
									"console.log('Generated Timestamp:', timestamp);",
									"console.log('Generated Nonce:', nonce);",
									"console.log('Generated Signature:', signature);",
									"console.log('Data being signed:', data);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save the API key and secret from the response",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data) {",
									"        pm.environment.set('apiKey', response.data.apiKey);",
									"        pm.environment.set('apiSecret', response.data.secret);",
									"        console.log('Saved new API key and secret to environment');",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantId\": \"{{merchantId}}\",\n    \"description\": \"API Key for testing\",\n    \"rateLimit\": 1000,\n    \"allowedEndpoints\": [\n        \"/api/v1/surchargefee/calculate\",\n        \"/api/v1/surchargefee/calculate-batch\"\n    ],\n    \"purpose\": \"TESTING\",\n    \"onboardingMetadata\": {\n        \"adminUserId\": \"test-admin\",\n        \"onboardingReference\": \"{{$guid}}\",\n        \"onboardingTimestamp\": \"{{$isoTimestamp}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/apikey/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"apikey",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rotate API Key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = pm.variables.replaceIn('{{$guid}}');",
									"",
									"// Get secret from environment",
									"const secret = pm.environment.get('apiSecret');",
									"if (!secret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID and API key from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"const apiKey = pm.environment.get('apiKey');",
									"",
									"if (!merchantId || !apiKey) {",
									"    console.error('Merchant ID or API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const data = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(data, secret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Log values for debugging",
									"console.log('Using Merchant ID:', merchantId);",
									"console.log('Using API Key:', apiKey);",
									"console.log('Generated Timestamp:', timestamp);",
									"console.log('Generated Nonce:', nonce);",
									"console.log('Generated Signature:', signature);",
									"console.log('Data being signed:', data);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('data');",
									"    ",
									"    if (jsonData.data) {",
									"        pm.expect(jsonData.data).to.have.property('apiKey');",
									"        pm.expect(jsonData.data).to.have.property('secret');",
									"        ",
									"        // Save new API key and secret to environment",
									"        pm.environment.set('apiKey', jsonData.data.apiKey);",
									"        pm.environment.set('apiSecret', jsonData.data.secret);",
									"        ",
									"        console.log('New API Key saved:', jsonData.data.apiKey);",
									"        console.log('New API Secret saved:', jsonData.data.secret);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantId\": \"{{merchantId}}\",\n    \"apiKey\": \"{{apiKey}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/apikey/rotate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"apikey",
								"rotate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update API Key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get secret from environment",
									"const secret = pm.environment.get('apiSecret');",
									"if (!secret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID and API key from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"const apiKey = pm.environment.get('apiKey');",
									"",
									"if (!merchantId || !apiKey) {",
									"    console.error('Merchant ID or API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const data = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(data, secret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Log values for debugging",
									"console.log('Using Merchant ID:', merchantId);",
									"console.log('Using API Key:', apiKey);",
									"console.log('Generated Timestamp:', timestamp);",
									"console.log('Generated Nonce:', nonce);",
									"console.log('Generated Signature:', signature);",
									"console.log('Data being signed:', data);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantId\": \"{{merchantId}}\",\n    \"apiKey\": \"{{apiKey}}\",\n    \"description\": \"{{apiKeyDescription}}\",\n    \"rateLimit\": {{apiKeyRateLimit}},\n    \"allowedEndpoints\": {{apiKeyAllowedEndpoints}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/apikey/update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"apikey",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke API Key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get secret from environment",
									"const secret = pm.environment.get('apiSecret');",
									"if (!secret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID and API key from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"const apiKey = pm.environment.get('apiKey');",
									"",
									"if (!merchantId || !apiKey) {",
									"    console.error('Merchant ID or API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const data = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(data, secret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Log values for debugging",
									"console.log('Using Merchant ID:', merchantId);",
									"console.log('Using API Key:', apiKey);",
									"console.log('Generated Timestamp:', timestamp);",
									"console.log('Generated Nonce:', nonce);",
									"console.log('Generated Signature:', signature);",
									"console.log('Data being signed:', data);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantId\": \"{{merchantId}}\",\n    \"apiKey\": \"{{apiKey}}\",\n    \"onboardingMetadata\": {\n        \"adminUserId\": \"admin123\",\n        \"onboardingReference\": \"TEST-REF-005\",\n        \"onboardingTimestamp\": \"{{$isoTimestamp}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/apikey/revoke",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"apikey",
								"revoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Merchant API Keys",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get secret from environment",
									"const secret = pm.environment.get('apiSecret');",
									"if (!secret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID and API key from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"const apiKey = pm.environment.get('apiKey');",
									"",
									"if (!merchantId || !apiKey) {",
									"    console.error('Merchant ID or API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const data = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(data, secret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Log values for debugging",
									"console.log('Using Merchant ID:', merchantId);",
									"console.log('Using API Key:', apiKey);",
									"console.log('Generated Timestamp:', timestamp);",
									"console.log('Generated Nonce:', nonce);",
									"console.log('Generated Signature:', signature);",
									"console.log('Data being signed:', data);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    ",
									"    // If there are API keys, verify their structure",
									"    if (jsonData.data.length > 0) {",
									"        const apiKey = jsonData.data[0];",
									"        pm.expect(apiKey).to.have.property('apiKey');",
									"        pm.expect(apiKey).to.have.property('description');",
									"        pm.expect(apiKey).to.have.property('rateLimit');",
									"        pm.expect(apiKey).to.have.property('allowedEndpoints');",
									"        pm.expect(apiKey).to.have.property('status');",
									"        pm.expect(apiKey).to.have.property('createdAt');",
									"        pm.expect(apiKey).to.have.property('lastRotatedAt');",
									"        pm.expect(apiKey).to.have.property('revokedAt');",
									"        pm.expect(apiKey).to.have.property('isRevoked');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/apikey/list?merchantId={{merchantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"apikey",
								"list"
							],
							"query": [
								{
									"key": "merchantId",
									"value": "{{merchantId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Merchant by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce\r",
									"const now = new Date();\r",
									"const timestamp = now.toISOString();\r",
									"const nonce = Math.random().toString(36).substring(2, 15);\r",
									"\r",
									"// Get secret from environment\r",
									"const secret = pm.environment.get('apiSecret');\r",
									"if (!secret) {\r",
									"    console.error('API Secret not found in environment');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Get merchant ID and API key from environment\r",
									"const merchantId = pm.environment.get('merchantId');\r",
									"const apiKey = pm.environment.get('apiKey');\r",
									"\r",
									"if (!merchantId || !apiKey) {\r",
									"    console.error('Merchant ID or API Key not found in environment');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Create data string to sign with pipe separators\r",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;\r",
									"\r",
									"// Generate HMAC-SHA256 signature\r",
									"const signature = CryptoJS.HmacSHA256(dataToSign, secret).toString(CryptoJS.enc.Base64);\r",
									"\r",
									"// Set headers\r",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });\r",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });\r",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });\r",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });\r",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });\r",
									"\r",
									"// Log values for debugging\r",
									"console.log('Using Merchant ID:', merchantId);\r",
									"console.log('Using API Key:', apiKey);\r",
									"console.log('Generated Timestamp:', timestamp);\r",
									"console.log('Generated Nonce:', nonce);\r",
									"console.log('Generated Signature:', signature);\r",
									"console.log('Data being signed:', dataToSign);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has required fields', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('success', true);\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    \r",
									"    if (jsonData.data) {\r",
									"        pm.expect(jsonData.data).to.have.property('merchantId');\r",
									"        pm.expect(jsonData.data).to.have.property('externalMerchantId');\r",
									"        pm.expect(jsonData.data).to.have.property('merchantName');\r",
									"        pm.expect(jsonData.data).to.have.property('status');\r",
									"        pm.expect(jsonData.data).to.have.property('createdAt');\r",
									"        pm.expect(jsonData.data).to.have.property('updatedAt');\r",
									"        \r",
									"        // Log the merchant details\r",
									"        console.log('Merchant ID:', jsonData.data.merchantId);\r",
									"        console.log('External Merchant ID:', jsonData.data.externalMerchantId);\r",
									"        console.log('Merchant Name:', jsonData.data.merchantName);\r",
									"        console.log('Status:', jsonData.data.status);\r",
									"        console.log('Created At:', jsonData.data.createdAt);\r",
									"        console.log('Updated At:', jsonData.data.updatedAt);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/merchants/{{merchantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"merchants",
								"{{merchantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Merchant by External ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce\r",
									"const now = new Date();\r",
									"const timestamp = now.toISOString();\r",
									"const nonce = Math.random().toString(36).substring(2, 15);\r",
									"\r",
									"// Get secret from environment\r",
									"const secret = pm.environment.get('apiSecret');\r",
									"if (!secret) {\r",
									"    console.error('API Secret not found in environment');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Get merchant ID and API key from environment\r",
									"const merchantId = pm.environment.get('merchantId');\r",
									"const apiKey = pm.environment.get('apiKey');\r",
									"\r",
									"if (!merchantId || !apiKey) {\r",
									"    console.error('Merchant ID or API Key not found in environment');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Create data string to sign with pipe separators\r",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;\r",
									"\r",
									"// Generate HMAC-SHA256 signature\r",
									"const signature = CryptoJS.HmacSHA256(dataToSign, secret).toString(CryptoJS.enc.Base64);\r",
									"\r",
									"// Set headers\r",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });\r",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });\r",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });\r",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });\r",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });\r",
									"\r",
									"// Log values for debugging\r",
									"console.log('Using Merchant ID:', merchantId);\r",
									"console.log('Using API Key:', apiKey);\r",
									"console.log('Generated Timestamp:', timestamp);\r",
									"console.log('Generated Nonce:', nonce);\r",
									"console.log('Generated Signature:', signature);\r",
									"console.log('Data being signed:', dataToSign);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has required fields', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('success', true);\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    \r",
									"    if (jsonData.data) {\r",
									"        pm.expect(jsonData.data).to.have.property('merchantId');\r",
									"        pm.expect(jsonData.data).to.have.property('externalMerchantId');\r",
									"        pm.expect(jsonData.data).to.have.property('merchantName');\r",
									"        pm.expect(jsonData.data).to.have.property('status');\r",
									"        pm.expect(jsonData.data).to.have.property('createdAt');\r",
									"        pm.expect(jsonData.data).to.have.property('updatedAt');\r",
									"        \r",
									"        // Log the merchant details\r",
									"        console.log('Merchant ID:', jsonData.data.merchantId);\r",
									"        console.log('External Merchant ID:', jsonData.data.externalMerchantId);\r",
									"        console.log('Merchant Name:', jsonData.data.merchantName);\r",
									"        console.log('Status:', jsonData.data.status);\r",
									"        console.log('Created At:', jsonData.data.createdAt);\r",
									"        console.log('Updated At:', jsonData.data.updatedAt);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/merchants/external/{{externalMerchantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"merchants",
								"external",
								"{{externalMerchantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Merchant by External GUID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/merchants/external-guid/{{externalMerchantGuid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"merchants",
								"external-guid",
								"{{externalMerchantGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Merchant Audit Trail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce\r",
									"const now = new Date();\r",
									"const timestamp = now.toISOString();\r",
									"const nonce = Math.random().toString(36).substring(2, 15);\r",
									"\r",
									"// Get secret from environment\r",
									"const secret = pm.environment.get('apiSecret');\r",
									"if (!secret) {\r",
									"    console.error('API Secret not found in environment');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Get merchant ID and API key from environment\r",
									"const merchantId = pm.environment.get('merchantId');\r",
									"const apiKey = pm.environment.get('apiKey');\r",
									"\r",
									"if (!merchantId || !apiKey) {\r",
									"    console.error('Merchant ID or API Key not found in environment');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Create data string to sign with pipe separators\r",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;\r",
									"\r",
									"// Generate HMAC-SHA256 signature\r",
									"const signature = CryptoJS.HmacSHA256(dataToSign, secret).toString(CryptoJS.enc.Base64);\r",
									"\r",
									"// Set headers\r",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });\r",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });\r",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });\r",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });\r",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });\r",
									"\r",
									"// Log values for debugging\r",
									"console.log('Using Merchant ID:', merchantId);\r",
									"console.log('Using API Key:', apiKey);\r",
									"console.log('Generated Timestamp:', timestamp);\r",
									"console.log('Generated Nonce:', nonce);\r",
									"console.log('Generated Signature:', signature);\r",
									"console.log('Data being signed:', dataToSign);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/merchants/{{merchantId}}/audit-trail",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"merchants",
								"{{merchantId}}",
								"audit-trail"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Merchant Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce\r",
									"const now = new Date();\r",
									"const timestamp = now.toISOString();\r",
									"const nonce = Math.random().toString(36).substring(2, 15);\r",
									"\r",
									"// Get secret from environment\r",
									"const secret = pm.environment.get('apiSecret');\r",
									"if (!secret) {\r",
									"    console.error('API Secret not found in environment');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Get merchant ID and API key from environment\r",
									"const merchantId = pm.environment.get('merchantId');\r",
									"const apiKey = pm.environment.get('apiKey');\r",
									"\r",
									"if (!merchantId || !apiKey) {\r",
									"    console.error('Merchant ID or API Key not found in environment');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Get request body\r",
									"const requestBody = pm.request.body.raw;\r",
									"if (!requestBody) {\r",
									"    console.error('Request body is required');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Create data string to sign with pipe separators\r",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;\r",
									"\r",
									"// Generate HMAC-SHA256 signature\r",
									"const signature = CryptoJS.HmacSHA256(dataToSign, secret).toString(CryptoJS.enc.Base64);\r",
									"\r",
									"// Set headers\r",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });\r",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });\r",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });\r",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });\r",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });\r",
									"\r",
									"// Log values for debugging\r",
									"console.log('Using Merchant ID:', merchantId);\r",
									"console.log('Using API Key:', apiKey);\r",
									"console.log('Generated Timestamp:', timestamp);\r",
									"console.log('Generated Nonce:', nonce);\r",
									"console.log('Request Body:', requestBody);\r",
									"console.log('Generated Signature:', signature);\r",
									"console.log('Data being signed:', dataToSign);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has required fields', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('success', true);\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    \r",
									"    if (jsonData.data) {\r",
									"        pm.expect(jsonData.data).to.have.property('merchantId');\r",
									"        pm.expect(jsonData.data).to.have.property('status');\r",
									"        pm.expect(jsonData.data).to.have.property('updatedAt');\r",
									"        \r",
									"        // Log the update details\r",
									"        console.log('Merchant ID:', jsonData.data.merchantId);\r",
									"        console.log('New Status:', jsonData.data.status);\r",
									"        console.log('Updated At:', jsonData.data.updatedAt);\r",
									"    }\r",
									"});\r",
									"\r",
									"// Verify the status was actually updated\r",
									"pm.test('Status was updated correctly', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var requestBody = JSON.parse(pm.request.body.raw);\r",
									"    \r",
									"    if (jsonData.data && requestBody) {\r",
									"        pm.expect(jsonData.data.status).to.equal(requestBody.status);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"statusId\": \"{{statusId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/merchants/{{merchantId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"merchants",
								"{{merchantId}}",
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Surcharge Provider Management",
			"item": [
				{
					"name": "Create Surcharge Provider",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const timestamp = new Date().toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Log values for debugging",
									"console.log('Using Merchant ID:', merchantId);",
									"console.log('Using API Key:', apiKey);",
									"console.log('Generated Timestamp:', timestamp);",
									"console.log('Generated Nonce:', nonce);",
									"console.log('Generated Signature:', signature);",
									"console.log('Data being signed:', dataToSign);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has required fields', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('success', true);\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    \r",
									"    if (jsonData.data) {\r",
									"        pm.expect(jsonData.data).to.have.property('providerId');\r",
									"        pm.expect(jsonData.data).to.have.property('merchantId');\r",
									"        pm.expect(jsonData.data).to.have.property('providerName');\r",
									"        pm.expect(jsonData.data).to.have.property('providerType');\r",
									"        pm.expect(jsonData.data).to.have.property('status');\r",
									"        pm.expect(jsonData.data).to.have.property('createdAt');\r",
									"        pm.expect(jsonData.data).to.have.property('updatedAt');\r",
									"        \r",
									"        // Log the provider details\r",
									"        console.log('Provider ID:', jsonData.data.providerId);\r",
									"        console.log('Merchant ID:', jsonData.data.merchantId);\r",
									"        console.log('Provider Name:', jsonData.data.providerName);\r",
									"        console.log('Provider Type:', jsonData.data.providerType);\r",
									"        console.log('Status:', jsonData.data.status);\r",
									"        console.log('Created At:', jsonData.data.createdAt);\r",
									"        console.log('Updated At:', jsonData.data.updatedAt);\r",
									"    }\r",
									"});\r",
									"\r",
									"// Verify the provider was created with correct data\r",
									"pm.test('Provider was created with correct data', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var requestBody = JSON.parse(pm.request.body.raw);\r",
									"    \r",
									"    if (jsonData.data && requestBody) {\r",
									"        pm.expect(jsonData.data.providerName).to.equal(requestBody.providerName);\r",
									"        pm.expect(jsonData.data.providerType).to.equal(requestBody.providerType);\r",
									"        pm.expect(jsonData.data.status).to.equal('Active');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{providerName}}\",\n    \"code\": \"{{providerCode}}\",\n    \"description\": \"{{providerDescription}}\",\n    \"baseUrl\": \"{{providerBaseUrl}}\",\n    \"authenticationType\": \"{{providerAuthType}}\",\n    \"credentialsSchema\": {{providerCredentialsSchema}},\n    \"status\": \"{{providerStatus}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/surcharge/providers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"surcharge",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Surcharge Providers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Debug: Check environment variables",
									"console.log('Environment Variables:');",
									"console.log('Merchant ID:', pm.environment.get('merchantId'));",
									"console.log('API Key:', pm.environment.get('apiKey'));",
									"console.log('Secret Key:', pm.environment.get('apiSecret') ? 'Set' : 'Not Set');",
									"",
									"// Generate a nonce (random string)",
									"const nonce = Math.random().toString(36).substring(2, 12);",
									"",
									"// Get current timestamp in ISO format",
									"const timestamp = new Date().toISOString();",
									"",
									"// Set environment variables",
									"pm.environment.set('nonce', nonce);",
									"pm.environment.set('timestamp', timestamp);",
									"",
									"// Get merchant ID and API key from environment variables",
									"const merchantId = pm.environment.get('merchantId');",
									"const apiKey = pm.environment.get('apiKey');",
									"const secretKey = pm.environment.get('apiSecret');",
									"",
									"// Set request headers",
									"pm.request.headers.add({",
									"    key: 'X-Merchant-ID',",
									"    value: merchantId",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: 'X-API-Key',",
									"    value: apiKey",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: 'X-Timestamp',",
									"    value: timestamp",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: 'X-Nonce',",
									"    value: nonce",
									"});",
									"",
									"// Generate signature",
									"const data = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"const signature = CryptoJS.HmacSHA256(data, secretKey).toString(CryptoJS.enc.Base64);",
									"",
									"pm.request.headers.add({",
									"    key: 'X-Signature',",
									"    value: signature",
									"});",
									"",
									"// Log the signature generation details for debugging",
									"console.log('Signature Generation Details:');",
									"console.log('Data to sign:', data);",
									"console.log('Generated signature:', signature);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test script\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has providers array\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each provider has required fields\", function () {\r",
									"    const response = pm.response.json();\r",
									"    response.forEach(provider => {\r",
									"        pm.expect(provider).to.have.property('id');\r",
									"        pm.expect(provider).to.have.property('name');\r",
									"        pm.expect(provider).to.have.property('code');\r",
									"        pm.expect(provider).to.have.property('baseUrl');\r",
									"        pm.expect(provider).to.have.property('authenticationType');\r",
									"        pm.expect(provider).to.have.property('statusId');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/surcharge/providers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"surcharge",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Surcharge Provider by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Debug: Check environment variables",
									"console.log('Environment Variables:');",
									"console.log('Merchant ID:', pm.environment.get('merchantId'));",
									"console.log('API Key:', pm.environment.get('apiKey'));",
									"console.log('Secret Key:', pm.environment.get('apiSecret') ? 'Set' : 'Not Set');",
									"",
									"// Generate a nonce (random string)",
									"const nonce = Math.random().toString(36).substring(2, 12);",
									"",
									"// Get current timestamp in ISO format",
									"const timestamp = new Date().toISOString();",
									"",
									"// Set environment variables",
									"pm.environment.set('nonce', nonce);",
									"pm.environment.set('timestamp', timestamp);",
									"",
									"// Get merchant ID and API key from environment variables",
									"const merchantId = pm.environment.get('merchantId');",
									"const apiKey = pm.environment.get('apiKey');",
									"const secretKey = pm.environment.get('apiSecret');",
									"",
									"// Set request headers",
									"pm.request.headers.add({",
									"    key: 'X-Merchant-ID',",
									"    value: merchantId",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: 'X-API-Key',",
									"    value: apiKey",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: 'X-Timestamp',",
									"    value: timestamp",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: 'X-Nonce',",
									"    value: nonce",
									"});",
									"",
									"// Generate signature",
									"const data = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"const signature = CryptoJS.HmacSHA256(data, secretKey).toString(CryptoJS.enc.Base64);",
									"",
									"pm.request.headers.add({",
									"    key: 'X-Signature',",
									"    value: signature",
									"});",
									"",
									"// Log the signature generation details for debugging",
									"console.log('Signature Generation Details:');",
									"console.log('Data to sign:', data);",
									"console.log('Generated signature:', signature);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/surcharge/providers/{{providerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"surcharge",
								"providers",
								"{{providerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Surcharge Provider",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Debug: Check environment variables",
									"console.log('Environment Variables:');",
									"console.log('Merchant ID:', pm.environment.get('merchantId'));",
									"console.log('API Key:', pm.environment.get('apiKey'));",
									"console.log('Secret Key:', pm.environment.get('apiSecret') ? 'Set' : 'Not Set');",
									"",
									"// Generate a nonce (random string)",
									"const nonce = Math.random().toString(36).substring(2, 12);",
									"",
									"// Get current timestamp in ISO format",
									"const timestamp = new Date().toISOString();",
									"",
									"// Set environment variables",
									"pm.environment.set('nonce', nonce);",
									"pm.environment.set('timestamp', timestamp);",
									"",
									"// Get merchant ID and API key from environment variables",
									"const merchantId = pm.environment.get('merchantId');",
									"const apiKey = pm.environment.get('apiKey');",
									"const secretKey = pm.environment.get('apiSecret');",
									"",
									"// Set request headers",
									"pm.request.headers.add({",
									"    key: 'X-Merchant-ID',",
									"    value: merchantId",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: 'X-API-Key',",
									"    value: apiKey",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: 'X-Timestamp',",
									"    value: timestamp",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: 'X-Nonce',",
									"    value: nonce",
									"});",
									"",
									"// Generate signature",
									"const data = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"const signature = CryptoJS.HmacSHA256(data, secretKey).toString(CryptoJS.enc.Base64);",
									"",
									"pm.request.headers.add({",
									"    key: 'X-Signature',",
									"    value: signature",
									"});",
									"",
									"// Log the signature generation details for debugging",
									"console.log('Signature Generation Details:');",
									"console.log('Data to sign:', data);",
									"console.log('Generated signature:', signature);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{providerName}}\",\n    \"description\": \"{{providerDescription}}\",\n    \"baseUrl\": \"{{providerBaseUrl}}\",\n    \"authenticationType\": \"{{providerAuthType}}\",\n    \"credentialsSchema\": {{providerCredentialsSchema}},\n    \"status\": \"{{providerStatus}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/surcharge/providers/{{providerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"surcharge",
								"providers",
								"{{providerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Surcharge Provider",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Debug: Check environment variables",
									"console.log('Environment Variables:');",
									"console.log('Merchant ID:', pm.environment.get('merchantId'));",
									"console.log('API Key:', pm.environment.get('apiKey'));",
									"console.log('Secret Key:', pm.environment.get('apiSecret') ? 'Set' : 'Not Set');",
									"",
									"// Generate a nonce (random string)",
									"const nonce = Math.random().toString(36).substring(2, 12);",
									"",
									"// Get current timestamp in ISO format",
									"const timestamp = new Date().toISOString();",
									"",
									"// Set environment variables",
									"pm.environment.set('nonce', nonce);",
									"pm.environment.set('timestamp', timestamp);",
									"",
									"// Get merchant ID and API key from environment variables",
									"const merchantId = pm.environment.get('merchantId');",
									"const apiKey = pm.environment.get('apiKey');",
									"const secretKey = pm.environment.get('apiSecret');",
									"",
									"// Set request headers",
									"pm.request.headers.add({",
									"    key: 'X-Merchant-ID',",
									"    value: merchantId",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: 'X-API-Key',",
									"    value: apiKey",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: 'X-Timestamp',",
									"    value: timestamp",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: 'X-Nonce',",
									"    value: nonce",
									"});",
									"",
									"// Generate signature",
									"const data = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"const signature = CryptoJS.HmacSHA256(data, secretKey).toString(CryptoJS.enc.Base64);",
									"",
									"pm.request.headers.add({",
									"    key: 'X-Signature',",
									"    value: signature",
									"});",
									"",
									"// Log the signature generation details for debugging",
									"console.log('Signature Generation Details:');",
									"console.log('Data to sign:', data);",
									"console.log('Generated signature:', signature);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/surcharge/providers/{{providerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"surcharge",
								"providers",
								"{{providerId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Ping",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/ping",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"ping"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Surcharge Fee",
			"item": [
				{
					"name": "Calculate Surcharge Fee",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get request body",
									"const requestBody = JSON.stringify({",
									"    nicn: pm.environment.get('nicn'),",
									"    processor: pm.environment.get('processor'),",
									"    amount: parseFloat(pm.environment.get('amount')),",
									"    totalAmount: parseFloat(pm.environment.get('totalAmount')),",
									"    country: pm.environment.get('country'),",
									"    region: pm.environment.get('region'),",
									"    campaign: JSON.parse(pm.environment.get('campaign')),",
									"    data: JSON.parse(pm.environment.get('data')),",
									"    sTxId: pm.environment.get('sTxId'),",
									"    mTxId: pm.environment.get('mTxId'),",
									"    cardToken: pm.environment.get('cardToken'),",
									"    entryMethod: pm.environment.get('entryMethod'),",
									"    nonSurchargableAmount: parseFloat(pm.environment.get('nonSurchargableAmount'))",
									"});",
									"",
									"// Get secret from environment",
									"const secret = pm.environment.get('apiSecret');",
									"console.log('Using secret for signature:', secret);",
									"",
									"// Create data string to sign",
									"const dataToSign = timestamp + nonce + requestBody;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, secret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: pm.environment.get('merchantId') });",
									"pm.request.headers.add({ key: 'X-API-Key', value: pm.environment.get('apiKey') });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Set the request body",
									"pm.request.body.raw = requestBody;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nicn\": \"{{nicn}}\",\n    \"processor\": \"{{processor}}\",\n    \"amount\": {{amount}},\n    \"totalAmount\": {{totalAmount}},\n    \"country\": \"{{country}}\",\n    \"region\": \"{{region}}\",\n    \"campaign\": {{campaign}},\n    \"data\": {{data}},\n    \"sTxId\": \"{{sTxId}}\",\n    \"mTxId\": \"{{mTxId}}\",\n    \"cardToken\": \"{{cardToken}}\",\n    \"entryMethod\": \"{{entryMethod}}\",\n    \"nonSurchargableAmount\": {{nonSurchargableAmount}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/surchargefee/calculate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"surchargefee",
								"calculate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sales",
			"item": [
				{
					"name": "Process Sale",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get request body",
									"const requestBody = JSON.stringify({",
									"    nicn: pm.environment.get('nicn'),",
									"    processor: pm.environment.get('processor'),",
									"    amount: parseFloat(pm.environment.get('amount')),",
									"    totalAmount: parseFloat(pm.environment.get('totalAmount')),",
									"    country: pm.environment.get('country'),",
									"    region: pm.environment.get('region'),",
									"    campaign: JSON.parse(pm.environment.get('campaign')),",
									"    data: JSON.parse(pm.environment.get('data')),",
									"    sTxId: pm.environment.get('sTxId'),",
									"    mTxId: pm.environment.get('mTxId'),",
									"    cardToken: pm.environment.get('cardToken'),",
									"    entryMethod: pm.environment.get('entryMethod'),",
									"    nonSurchargableAmount: parseFloat(pm.environment.get('nonSurchargableAmount'))",
									"});",
									"",
									"// Get secret from environment",
									"const secret = pm.environment.get('apiSecret');",
									"console.log('Using secret for signature:', secret);",
									"",
									"// Create data string to sign",
									"const dataToSign = timestamp + nonce + requestBody;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, secret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: pm.environment.get('merchantId') });",
									"pm.request.headers.add({ key: 'X-API-Key', value: pm.environment.get('apiKey') });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Set the request body",
									"pm.request.body.raw = requestBody;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nicn\": \"{{nicn}}\",\n    \"processor\": \"{{processor}}\",\n    \"amount\": {{amount}},\n    \"totalAmount\": {{totalAmount}},\n    \"country\": \"{{country}}\",\n    \"region\": \"{{region}}\",\n    \"campaign\": {{campaign}},\n    \"data\": {{data}},\n    \"sTxId\": \"{{sTxId}}\",\n    \"mTxId\": \"{{mTxId}}\",\n    \"cardToken\": \"{{cardToken}}\",\n    \"entryMethod\": \"{{entryMethod}}\",\n    \"nonSurchargableAmount\": {{nonSurchargableAmount}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/sales/process",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"sales",
								"process"
							]
						}
					},
					"response": []
				},
				{
					"name": "Process Batch Sales",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get request body",
									"const requestBody = JSON.stringify({",
									"    sales: [",
									"        {",
									"            nicn: pm.environment.get('nicn1'),",
									"            processor: 'VISA',",
									"            amount: 100.00,",
									"            totalAmount: 100.00,",
									"            country: 'US',",
									"            region: 'CA',",
									"            campaign: ['SUMMER2024'],",
									"            data: ['ECOMMERCE'],",
									"            sTxId: pm.environment.get('sTxId1'),",
									"            mTxId: pm.environment.get('mTxId1'),",
									"            cardToken: pm.environment.get('cardToken1'),",
									"            entryMethod: 'DIPPED',",
									"            nonSurchargableAmount: 0",
									"        },",
									"        {",
									"            nicn: pm.environment.get('nicn2'),",
									"            processor: 'MASTERCARD',",
									"            amount: 200.00,",
									"            totalAmount: 200.00,",
									"            country: 'US',",
									"            region: 'NY',",
									"            campaign: ['SUMMER2024'],",
									"            data: ['ECOMMERCE'],",
									"            sTxId: pm.environment.get('sTxId2'),",
									"            mTxId: pm.environment.get('mTxId2'),",
									"            cardToken: pm.environment.get('cardToken2'),",
									"            entryMethod: 'DIPPED',",
									"            nonSurchargableAmount: 0",
									"        }",
									"    ]",
									"});",
									"",
									"// Get secret from environment",
									"const secret = pm.environment.get('apiSecret');",
									"console.log('Using secret for signature:', secret);",
									"",
									"// Create data string to sign",
									"const dataToSign = timestamp + nonce + requestBody;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, secret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: pm.environment.get('merchantId') });",
									"pm.request.headers.add({ key: 'X-API-Key', value: pm.environment.get('apiKey') });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Set the request body",
									"pm.request.body.raw = requestBody;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sales\": [\n        {\n            \"nicn\": \"{{nicn1}}\",\n            \"processor\": \"VISA\",\n            \"amount\": 100.00,\n            \"totalAmount\": 100.00,\n            \"country\": \"US\",\n            \"region\": \"CA\",\n            \"campaign\": [\"SUMMER2024\"],\n            \"data\": [\"ECOMMERCE\"],\n            \"sTxId\": \"{{sTxId1}}\",\n            \"mTxId\": \"{{mTxId1}}\",\n            \"cardToken\": \"{{cardToken1}}\",\n            \"entryMethod\": \"DIPPED\",\n            \"nonSurchargableAmount\": 0\n        },\n        {\n            \"nicn\": \"{{nicn2}}\",\n            \"processor\": \"MASTERCARD\",\n            \"amount\": 200.00,\n            \"totalAmount\": 200.00,\n            \"country\": \"US\",\n            \"region\": \"NY\",\n            \"campaign\": [\"SUMMER2024\"],\n            \"data\": [\"ECOMMERCE\"],\n            \"sTxId\": \"{{sTxId2}}\",\n            \"mTxId\": \"{{mTxId2}}\",\n            \"cardToken\": \"{{cardToken2}}\",\n            \"entryMethod\": \"DIPPED\",\n            \"nonSurchargableAmount\": 0\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/sales/process-batch",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"sales",
								"process-batch"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5292",
			"type": "string"
		},
		{
			"key": "merchantId",
			"value": "DEV001",
			"type": "string"
		},
		{
			"key": "externalMerchantId",
			"value": "EXT001",
			"type": "string"
		},
		{
			"key": "externalMerchantGuid",
			"value": "00000000-0000-0000-0000-000000000000",
			"type": "string"
		},
		{
			"key": "apiKey",
			"value": "",
			"type": "string"
		},
		{
			"key": "apiSecret",
			"value": "",
			"type": "string"
		},
		{
			"key": "statusId",
			"value": "00000000-0000-0000-0000-000000000000",
			"type": "string"
		},
		{
			"key": "nicn",
			"value": "NICN001",
			"type": "string"
		},
		{
			"key": "nicn1",
			"value": "NICN001",
			"type": "string"
		},
		{
			"key": "nicn2",
			"value": "NICN002",
			"type": "string"
		},
		{
			"key": "processor",
			"value": "VISA",
			"type": "string"
		},
		{
			"key": "amount",
			"value": "100.00",
			"type": "string"
		},
		{
			"key": "totalAmount",
			"value": "100.00",
			"type": "string"
		},
		{
			"key": "country",
			"value": "US",
			"type": "string"
		},
		{
			"key": "region",
			"value": "CA",
			"type": "string"
		},
		{
			"key": "campaign",
			"value": "[\"SUMMER2024\"]",
			"type": "string"
		},
		{
			"key": "data",
			"value": "[\"ECOMMERCE\"]",
			"type": "string"
		},
		{
			"key": "sTxId",
			"value": "STX001",
			"type": "string"
		},
		{
			"key": "sTxId1",
			"value": "STX001",
			"type": "string"
		},
		{
			"key": "sTxId2",
			"value": "STX002",
			"type": "string"
		},
		{
			"key": "mTxId",
			"value": "MTX001",
			"type": "string"
		},
		{
			"key": "mTxId1",
			"value": "MTX001",
			"type": "string"
		},
		{
			"key": "mTxId2",
			"value": "MTX002",
			"type": "string"
		},
		{
			"key": "cardToken",
			"value": "CARD001",
			"type": "string"
		},
		{
			"key": "cardToken1",
			"value": "CARD001",
			"type": "string"
		},
		{
			"key": "cardToken2",
			"value": "CARD002",
			"type": "string"
		},
		{
			"key": "entryMethod",
			"value": "DIPPED",
			"type": "string"
		},
		{
			"key": "nonSurchargableAmount",
			"value": "0",
			"type": "string"
		},
		{
			"key": "apiKeyName",
			"value": "Test API Key",
			"type": "string"
		},
		{
			"key": "apiKeyDescription",
			"value": "Test API Key Description",
			"type": "string"
		},
		{
			"key": "apiKeyRateLimit",
			"value": "1000",
			"type": "string"
		},
		{
			"key": "apiKeyAllowedEndpoints",
			"value": "[\"/api/v1/transactions\", \"/api/v1/batch\"]",
			"type": "string"
		},
		{
			"key": "apiKeyExpirationDays",
			"value": "30",
			"type": "string"
		},
		{
			"key": "apiKeyId",
			"value": "",
			"type": "string"
		},
		{
			"key": "apiKeyStatus",
			"value": "ACTIVE",
			"type": "string"
		},
		{
			"key": "apiKeyPurpose",
			"value": "INITIAL",
			"type": "string"
		},
		{
			"key": "merchantName",
			"value": "Test Merchant",
			"type": "string"
		},
		{
			"key": "adminUserId",
			"value": "admin123",
			"type": "string"
		},
		{
			"key": "onboardingReference",
			"value": "TEST-REF-001",
			"type": "string"
		},
		{
			"key": "providerName",
			"value": "Test Provider",
			"type": "string"
		},
		{
			"key": "providerCode",
			"value": "TEST",
			"type": "string"
		},
		{
			"key": "providerDescription",
			"value": "Test Surcharge Provider",
			"type": "string"
		},
		{
			"key": "providerBaseUrl",
			"value": "https://api.test-provider.com",
			"type": "string"
		},
		{
			"key": "providerAuthType",
			"value": "API_KEY",
			"type": "string"
		},
		{
			"key": "providerCredentialsSchema",
			"value": "{\"required_fields\":[{\"name\":\"api_key\",\"type\":\"string\",\"description\":\"API Key for authentication\"}]}",
			"type": "string"
		},
		{
			"key": "providerStatus",
			"value": "ACTIVE",
			"type": "string"
		},
		{
			"key": "providerId",
			"value": "",
			"type": "string"
		}
	]
}