{
	"info": {
		"_postman_id": "52607db1-cffd-4446-b704-2bb2271550cc",
		"name": "FeeNominalService API",
		"description": "Collection for testing the FeeNominalService API endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32378011",
		"_collection_link": "https://earwig.postman.co/workspace/Earwig-Workspace~76662190-f6bb-4fb6-8065-6fed724ace4b/collection/32378011-52607db1-cffd-4446-b704-2bb2271550cc?action=share&source=collection_link&creator=32378011"
	},
	"item": [
		{
			"name": "API Key Management (v1)",
			"item": [
				{
					"name": "Initial API Key Generation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate UTC timestamp",
									"const now = new Date();",
									"const utcTimestamp = now.toISOString();",
									"",
									"pm.environment.set('timestamp', utcTimestamp);",
									"",
									"// Generate random nonce",
									"const nonce = Math.random().toString(36).substring(2, 12);",
									"pm.environment.set('nonce', nonce);",
									"",
									"// Generate random 4-digit merchant ID",
									"const randomMerchantId = Math.floor(1000 + Math.random() * 9000).toString();",
									"pm.environment.set('externalMerchantId', randomMerchantId);",
									"",
									"// Generate random merchant name",
									"const adjectives = ['Global', 'Premium', 'Elite', 'Prime', 'Royal', 'Supreme', 'Ultimate', 'Grand', 'Mega', 'Super'];",
									"const nouns = ['Merchant', 'Trading', 'Commerce', 'Retail', 'Business', 'Enterprise', 'Ventures', 'Solutions', 'Services', 'Group'];",
									"const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];",
									"const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];",
									"const randomMerchantName = `${randomAdjective} ${randomNoun} ${randomMerchantId}`;",
									"pm.environment.set('merchantName', randomMerchantName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save API key and secret from response",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"merchantId\", jsonData.merchantId);",
									"pm.environment.set(\"externalMerchantId\", jsonData.externalMerchantId);",
									"pm.environment.set(\"merchantName\", jsonData.merchantName);",
									"pm.environment.set(\"apiKey\", jsonData.apiKey);",
									"pm.environment.set(\"apiSecret\", jsonData.secret);",
									"pm.environment.set(\"apiKeyId\", jsonData.apiKeyId);",
									"pm.environment.set(\"rateLimit\", jsonData.rateLimit);",
									"pm.environment.set(\"allowedEndpoints\", JSON.stringify(jsonData.allowedEndpoints));",
									"pm.environment.set(\"expiresAt\", jsonData.expiresAt);",
									"pm.environment.set(\"createdAt\", jsonData.createdAt);",
									"",
									"// Log all saved values for verification",
									"console.log(\"Saved merchantId: \" + pm.environment.get(\"merchantId\"));",
									"console.log(\"Saved externalMerchantId: \" + pm.environment.get(\"externalMerchantId\"));",
									"console.log(\"Saved merchantName: \" + pm.environment.get(\"merchantName\"));",
									"console.log(\"Saved apiKey: \" + pm.environment.get(\"apiKey\"));",
									"console.log(\"Saved apiSecret: \" + pm.environment.get(\"apiSecret\"));",
									"console.log(\"Saved apiKeyId: \" + pm.environment.get(\"apiKeyId\"));",
									"console.log(\"Saved rateLimit: \" + pm.environment.get(\"rateLimit\"));",
									"console.log(\"Saved allowedEndpoints: \" + pm.environment.get(\"allowedEndpoints\"));",
									"console.log(\"Saved expiresAt: \" + pm.environment.get(\"expiresAt\"));",
									"console.log(\"Saved createdAt: \" + pm.environment.get(\"createdAt\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Timestamp",
								"value": "{{timestamp}}",
								"type": "text"
							},
							{
								"key": "X-Nonce",
								"value": "{{nonce}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"externalMerchantId\": \"{{externalMerchantId}}\",\n    \"merchantName\": \"{{merchantName}}\",\n    \"description\": \"{{apiKeyDescription}}\",\n    \"rateLimit\": {{apiKeyRateLimit}},\n    \"allowedEndpoints\": {{apiKeyAllowedEndpoints}},\n    \"purpose\": \"{{apiKeyPurpose}}\",\n    \"onboardingMetadata\": {\n        \"adminUserId\": \"{{adminUserId}}\",\n        \"onboardingReference\": \"{{onboardingReference}}\",\n        \"onboardingTimestamp\": \"{{timestamp}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/apikey/initial-generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"apikey",
								"initial-generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate API Key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const timestamp = new Date().toISOString();",
									"const nonce = pm.variables.replaceIn('{{$guid}}');",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment. Please run Initial API Key Generation first.');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment. Please run Initial API Key Generation first.');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment. Please run Initial API Key Generation first.');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const data = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(data, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Log values for debugging",
									"console.log('Using Merchant ID:', merchantId);",
									"console.log('Using API Key:', apiKey);",
									"console.log('Generated Timestamp:', timestamp);",
									"console.log('Generated Nonce:', nonce);",
									"console.log('Generated Signature:', signature);",
									"console.log('Data being signed:', data);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save the API key and secret from the response",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data) {",
									"        pm.environment.set('apiKey', response.data.apiKey);",
									"        pm.environment.set('apiSecret', response.data.secret);",
									"        console.log('Saved new API key and secret to environment');",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantId\": \"{{merchantId}}\",\n    \"description\": \"API Key for testing\",\n    \"rateLimit\": 444,\n    \"allowedEndpoints\": [\n        \"/api/v1/surchargefee/calculate\",\n        \"/api/v1/surchargefee/calculate-batch\",\n        \"/api/v1/onboarding/apikey/*\"\n    ],\n    \"purpose\": \"TESTING\",\n    \"onboardingMetadata\": {\n        \"adminUserId\": \"test-admin\",\n        \"onboardingReference\": \"{{$guid}}\",\n        \"onboardingTimestamp\": \"{{$isoTimestamp}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/apikey/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"apikey",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rotate API Key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = pm.variables.replaceIn('{{$guid}}');",
									"",
									"// Get secret from environment",
									"const secret = pm.environment.get('apiSecret');",
									"if (!secret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID and API key from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"const apiKey = pm.environment.get('apiKey');",
									"",
									"if (!merchantId || !apiKey) {",
									"    console.error('Merchant ID or API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const data = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(data, secret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Log values for debugging",
									"console.log('Using Merchant ID:', merchantId);",
									"console.log('Using API Key:', apiKey);",
									"console.log('Generated Timestamp:', timestamp);",
									"console.log('Generated Nonce:', nonce);",
									"console.log('Generated Signature:', signature);",
									"console.log('Data being signed:', data);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('data');",
									"    ",
									"    if (jsonData.data) {",
									"        pm.expect(jsonData.data).to.have.property('apiKey');",
									"        //pm.expect(jsonData.data).to.have.property('secret');",
									"        ",
									"        // Save new API key and secret to environment",
									"        pm.environment.set('apiKey', jsonData.data.apiKey);",
									"        //pm.environment.set('apiSecret', jsonData.data.secret);",
									"        ",
									"        console.log('New API Key saved:', jsonData.data.apiKey);",
									"        //console.log('New API Secret saved:', jsonData.data.secret);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantId\": \"{{merchantId}}\",\n    \"apiKey\": \"{{apiKey}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/apikey/rotate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"apikey",
								"rotate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update API Key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get secret from environment",
									"const secret = pm.environment.get('apiSecret');",
									"if (!secret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID and API key from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"const apiKey = pm.environment.get('apiKey');",
									"",
									"if (!merchantId || !apiKey) {",
									"    console.error('Merchant ID or API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const data = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(data, secret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Log values for debugging",
									"console.log('Using Merchant ID:', merchantId);",
									"console.log('Using API Key:', apiKey);",
									"console.log('Generated Timestamp:', timestamp);",
									"console.log('Generated Nonce:', nonce);",
									"console.log('Generated Signature:', signature);",
									"console.log('Data being signed:', data);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantId\": \"{{merchantId}}\",\n    \"apiKey\": \"{{apiKey}}\",\n    \"description\": \"{{apiKeyDescription}}\",\n    \"rateLimit\": {{apiKeyRateLimit}},\n    \"allowedEndpoints\": {{apiKeyAllowedEndpoints}},\n    \"onboardingMetadata\": {\n        \"adminUserId\": \"admin123\",\n        \"onboardingReference\": \"TEST-UPDATE-005\",\n        \"onboardingTimestamp\": \"{{$isoTimestamp}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/apikey/update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"apikey",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke API Key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get secret from environment",
									"const secret = pm.environment.get('apiSecret');",
									"if (!secret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID and API key from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"const apiKey = pm.environment.get('apiKey');",
									"",
									"if (!merchantId || !apiKey) {",
									"    console.error('Merchant ID or API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const data = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(data, secret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Log values for debugging",
									"console.log('Using Merchant ID:', merchantId);",
									"console.log('Using API Key:', apiKey);",
									"console.log('Generated Timestamp:', timestamp);",
									"console.log('Generated Nonce:', nonce);",
									"console.log('Generated Signature:', signature);",
									"console.log('Data being signed:', data);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchantId\": \"{{merchantId}}\",\n    \"apiKey\": \"{{apiKey}}\",\n    \"onboardingMetadata\": {\n        \"adminUserId\": \"admin123\",\n        \"onboardingReference\": \"TEST-REF-005\",\n        \"onboardingTimestamp\": \"{{$isoTimestamp}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/apikey/revoke",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"apikey",
								"revoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Merchant API Keys",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get secret from environment",
									"const secret = pm.environment.get('apiSecret');",
									"if (!secret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID and API key from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"const apiKey = pm.environment.get('apiKey');",
									"",
									"if (!merchantId || !apiKey) {",
									"    console.error('Merchant ID or API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const data = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(data, secret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Log values for debugging",
									"console.log('Using Merchant ID:', merchantId);",
									"console.log('Using API Key:', apiKey);",
									"console.log('Generated Timestamp:', timestamp);",
									"console.log('Generated Nonce:', nonce);",
									"console.log('Generated Signature:', signature);",
									"console.log('Data being signed:', data);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    ",
									"    // If there are API keys, verify their structure",
									"    if (jsonData.data.length > 0) {",
									"        const apiKey = jsonData.data[0];",
									"        pm.expect(apiKey).to.have.property('apiKey');",
									"        pm.expect(apiKey).to.have.property('description');",
									"        pm.expect(apiKey).to.have.property('rateLimit');",
									"        pm.expect(apiKey).to.have.property('allowedEndpoints');",
									"        pm.expect(apiKey).to.have.property('status');",
									"        pm.expect(apiKey).to.have.property('createdAt');",
									"        pm.expect(apiKey).to.have.property('lastRotatedAt');",
									"        pm.expect(apiKey).to.have.property('revokedAt');",
									"        pm.expect(apiKey).to.have.property('isRevoked');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/apikey/list?merchantId={{merchantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"apikey",
								"list"
							],
							"query": [
								{
									"key": "merchantId",
									"value": "{{merchantId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Merchant by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce\r",
									"const now = new Date();\r",
									"const timestamp = now.toISOString();\r",
									"const nonce = Math.random().toString(36).substring(2, 15);\r",
									"\r",
									"// Get secret from environment\r",
									"const secret = pm.environment.get('apiSecret');\r",
									"if (!secret) {\r",
									"    console.error('API Secret not found in environment');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Get merchant ID and API key from environment\r",
									"const merchantId = pm.environment.get('merchantId');\r",
									"const apiKey = pm.environment.get('apiKey');\r",
									"\r",
									"if (!merchantId || !apiKey) {\r",
									"    console.error('Merchant ID or API Key not found in environment');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Create data string to sign with pipe separators\r",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;\r",
									"\r",
									"// Generate HMAC-SHA256 signature\r",
									"const signature = CryptoJS.HmacSHA256(dataToSign, secret).toString(CryptoJS.enc.Base64);\r",
									"\r",
									"// Set headers\r",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });\r",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });\r",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });\r",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });\r",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });\r",
									"\r",
									"// Log values for debugging\r",
									"console.log('Using Merchant ID:', merchantId);\r",
									"console.log('Using API Key:', apiKey);\r",
									"console.log('Generated Timestamp:', timestamp);\r",
									"console.log('Generated Nonce:', nonce);\r",
									"console.log('Generated Signature:', signature);\r",
									"console.log('Data being signed:', dataToSign);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has required fields', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('success', true);\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    \r",
									"    if (jsonData.data) {\r",
									"        pm.expect(jsonData.data).to.have.property('merchantId');\r",
									"        pm.expect(jsonData.data).to.have.property('externalMerchantId');\r",
									"        pm.expect(jsonData.data).to.have.property('merchantName');\r",
									"        pm.expect(jsonData.data).to.have.property('status');\r",
									"        pm.expect(jsonData.data).to.have.property('createdAt');\r",
									"        pm.expect(jsonData.data).to.have.property('updatedAt');\r",
									"        \r",
									"        // Log the merchant details\r",
									"        console.log('Merchant ID:', jsonData.data.merchantId);\r",
									"        console.log('External Merchant ID:', jsonData.data.externalMerchantId);\r",
									"        console.log('Merchant Name:', jsonData.data.merchantName);\r",
									"        console.log('Status:', jsonData.data.status);\r",
									"        console.log('Created At:', jsonData.data.createdAt);\r",
									"        console.log('Updated At:', jsonData.data.updatedAt);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/merchants/{{merchantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"merchants",
								"{{merchantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Merchant by External ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce\r",
									"const now = new Date();\r",
									"const timestamp = now.toISOString();\r",
									"const nonce = Math.random().toString(36).substring(2, 15);\r",
									"\r",
									"// Get secret from environment\r",
									"const secret = pm.environment.get('apiSecret');\r",
									"if (!secret) {\r",
									"    console.error('API Secret not found in environment');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Get merchant ID and API key from environment\r",
									"const merchantId = pm.environment.get('merchantId');\r",
									"const apiKey = pm.environment.get('apiKey');\r",
									"\r",
									"if (!merchantId || !apiKey) {\r",
									"    console.error('Merchant ID or API Key not found in environment');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Create data string to sign with pipe separators\r",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;\r",
									"\r",
									"// Generate HMAC-SHA256 signature\r",
									"const signature = CryptoJS.HmacSHA256(dataToSign, secret).toString(CryptoJS.enc.Base64);\r",
									"\r",
									"// Set headers\r",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });\r",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });\r",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });\r",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });\r",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });\r",
									"\r",
									"// Log values for debugging\r",
									"console.log('Using Merchant ID:', merchantId);\r",
									"console.log('Using API Key:', apiKey);\r",
									"console.log('Generated Timestamp:', timestamp);\r",
									"console.log('Generated Nonce:', nonce);\r",
									"console.log('Generated Signature:', signature);\r",
									"console.log('Data being signed:', dataToSign);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has required fields', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('success', true);\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    \r",
									"    if (jsonData.data) {\r",
									"        pm.expect(jsonData.data).to.have.property('merchantId');\r",
									"        pm.expect(jsonData.data).to.have.property('externalMerchantId');\r",
									"        pm.expect(jsonData.data).to.have.property('merchantName');\r",
									"        pm.expect(jsonData.data).to.have.property('status');\r",
									"        pm.expect(jsonData.data).to.have.property('createdAt');\r",
									"        pm.expect(jsonData.data).to.have.property('updatedAt');\r",
									"        \r",
									"        // Log the merchant details\r",
									"        console.log('Merchant ID:', jsonData.data.merchantId);\r",
									"        console.log('External Merchant ID:', jsonData.data.externalMerchantId);\r",
									"        console.log('Merchant Name:', jsonData.data.merchantName);\r",
									"        console.log('Status:', jsonData.data.status);\r",
									"        console.log('Created At:', jsonData.data.createdAt);\r",
									"        console.log('Updated At:', jsonData.data.updatedAt);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/merchants/external/{{externalMerchantId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"merchants",
								"external",
								"{{externalMerchantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Merchant by External GUID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/merchants/external-guid/{{externalMerchantGuid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"merchants",
								"external-guid",
								"{{externalMerchantGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Merchant Audit Trail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce\r",
									"const now = new Date();\r",
									"const timestamp = now.toISOString();\r",
									"const nonce = Math.random().toString(36).substring(2, 15);\r",
									"\r",
									"// Get secret from environment\r",
									"const secret = pm.environment.get('apiSecret');\r",
									"if (!secret) {\r",
									"    console.error('API Secret not found in environment');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Get merchant ID and API key from environment\r",
									"const merchantId = pm.environment.get('merchantId');\r",
									"const apiKey = pm.environment.get('apiKey');\r",
									"\r",
									"if (!merchantId || !apiKey) {\r",
									"    console.error('Merchant ID or API Key not found in environment');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Create data string to sign with pipe separators\r",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;\r",
									"\r",
									"// Generate HMAC-SHA256 signature\r",
									"const signature = CryptoJS.HmacSHA256(dataToSign, secret).toString(CryptoJS.enc.Base64);\r",
									"\r",
									"// Set headers\r",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });\r",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });\r",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });\r",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });\r",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });\r",
									"\r",
									"// Log values for debugging\r",
									"console.log('Using Merchant ID:', merchantId);\r",
									"console.log('Using API Key:', apiKey);\r",
									"console.log('Generated Timestamp:', timestamp);\r",
									"console.log('Generated Nonce:', nonce);\r",
									"console.log('Generated Signature:', signature);\r",
									"console.log('Data being signed:', dataToSign);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/merchants/{{merchantId}}/audit-trail",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"merchants",
								"{{merchantId}}",
								"audit-trail"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Merchant Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce\r",
									"const now = new Date();\r",
									"const timestamp = now.toISOString();\r",
									"const nonce = Math.random().toString(36).substring(2, 15);\r",
									"\r",
									"// Get secret from environment\r",
									"const secret = pm.environment.get('apiSecret');\r",
									"if (!secret) {\r",
									"    console.error('API Secret not found in environment');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Get merchant ID and API key from environment\r",
									"const merchantId = pm.environment.get('merchantId');\r",
									"const apiKey = pm.environment.get('apiKey');\r",
									"\r",
									"if (!merchantId || !apiKey) {\r",
									"    console.error('Merchant ID or API Key not found in environment');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Get request body\r",
									"const requestBody = pm.request.body.raw;\r",
									"if (!requestBody) {\r",
									"    console.error('Request body is required');\r",
									"    return;\r",
									"}\r",
									"\r",
									"// Create data string to sign with pipe separators\r",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;\r",
									"\r",
									"// Generate HMAC-SHA256 signature\r",
									"const signature = CryptoJS.HmacSHA256(dataToSign, secret).toString(CryptoJS.enc.Base64);\r",
									"\r",
									"// Set headers\r",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });\r",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });\r",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });\r",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });\r",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });\r",
									"\r",
									"// Log values for debugging\r",
									"console.log('Using Merchant ID:', merchantId);\r",
									"console.log('Using API Key:', apiKey);\r",
									"console.log('Generated Timestamp:', timestamp);\r",
									"console.log('Generated Nonce:', nonce);\r",
									"console.log('Request Body:', requestBody);\r",
									"console.log('Generated Signature:', signature);\r",
									"console.log('Data being signed:', dataToSign);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has required fields', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('success', true);\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    \r",
									"    if (jsonData.data) {\r",
									"        pm.expect(jsonData.data).to.have.property('merchantId');\r",
									"        pm.expect(jsonData.data).to.have.property('status');\r",
									"        pm.expect(jsonData.data).to.have.property('updatedAt');\r",
									"        \r",
									"        // Log the update details\r",
									"        console.log('Merchant ID:', jsonData.data.merchantId);\r",
									"        console.log('New Status:', jsonData.data.status);\r",
									"        console.log('Updated At:', jsonData.data.updatedAt);\r",
									"    }\r",
									"});\r",
									"\r",
									"// Verify the status was actually updated\r",
									"pm.test('Status was updated correctly', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var requestBody = JSON.parse(pm.request.body.raw);\r",
									"    \r",
									"    if (jsonData.data && requestBody) {\r",
									"        pm.expect(jsonData.data.status).to.equal(requestBody.status);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"statusId\": \"{{statusId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/onboarding/merchants/{{merchantId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"onboarding",
								"merchants",
								"{{merchantId}}",
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Surcharge Provider Management",
			"item": [
				{
					"name": "Create Surcharge Provider",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random 5-digit value for provider code",
									"const random5DigitValue = Math.floor(10000 + Math.random() * 90000); // Generates 10000-99999",
									"const randomizedProviderCode = `INTERPAYMENTS_TEST_${random5DigitValue}`;",
									"",
									"// Set the randomized provider code in environment",
									"pm.environment.set('providerCode', randomizedProviderCode);",
									"",
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Log values for debugging",
									"console.log('Surcharge Providers Request:');",
									"console.log('Merchant ID:', merchantId);",
									"console.log('API Key:', apiKey);",
									"console.log('Randomized Provider Code:', randomizedProviderCode);",
									"console.log('Timestamp:', timestamp);",
									"console.log('Nonce:', nonce);",
									"console.log('Signature:', signature);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    // Check if response is direct provider object or wrapped",
									"    let providerData = jsonData;",
									"    if (jsonData.data) {",
									"        providerData = jsonData.data;",
									"    }",
									"    ",
									"    pm.expect(providerData).to.have.property('id');",
									"    pm.expect(providerData).to.have.property('name');",
									"    pm.expect(providerData).to.have.property('code');",
									"    pm.expect(providerData).to.have.property('baseUrl');",
									"    pm.expect(providerData).to.have.property('authenticationType');",
									"    pm.expect(providerData).to.have.property('status');",
									"    pm.expect(providerData).to.have.property('createdAt');",
									"    pm.expect(providerData).to.have.property('updatedAt');",
									"    pm.expect(providerData).to.have.property('createdBy');",
									"    pm.expect(providerData).to.have.property('updatedBy');",
									"    ",
									"    // Save provider data to environment variables for follow-up requests",
									"    pm.environment.set('providerId', providerData.id);",
									"    pm.environment.set('providerName', providerData.name);",
									"    pm.environment.set('providerCode', providerData.code);",
									"    pm.environment.set('providerDescription', providerData.description || '');",
									"    pm.environment.set('providerBaseUrl', providerData.baseUrl);",
									"    pm.environment.set('providerAuthType', providerData.authenticationType);",
									"    pm.environment.set('providerStatus', providerData.status);",
									"    ",
									"    console.log('Saved provider data to environment:');",
									"    console.log('Provider ID:', providerData.id);",
									"    console.log('Provider Name:', providerData.name);",
									"    console.log('Provider Code:', providerData.code);",
									"    console.log('Provider Status:', providerData.status);",
									"    ",
									"    // Verify status is ACTIVE",
									"    pm.expect(providerData.status).to.equal('ACTIVE');",
									"    ",
									"    // Check if configuration was created",
									"    if (providerData.configuration) {",
									"        console.log('Provider configuration created successfully');",
									"        console.log('Configuration ID:', providerData.configuration.id);",
									"        console.log('Configuration Name:', providerData.configuration.name);",
									"        console.log('Configuration Status:', providerData.configuration.status);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{providerName}}\",\n    \"code\": \"{{providerCode}}\",\n    \"description\": \"{{providerDescription}}\",\n    \"baseUrl\": \"{{providerBaseUrl}}\",\n    \"authenticationType\": \"{{providerAuthType}}\",\n    \"credentialsSchema\": {{providerCredentialsSchema}},\n    \"configuration\": {\n        \"ConfigName\": \"{{providerConfigName}}\",\n        \"credentials\": {{providerConfigCredentials}},\n        \"timeout\": {{providerConfigTimeout}},\n        \"retryCount\": {{providerConfigRetryCount}},\n        \"retryDelay\": {{providerConfigRetryDelay}},\n        \"rateLimit\": {{providerConfigRateLimit}},\n        \"rateLimitPeriod\": {{providerConfigRateLimitPeriod}},\n        \"metadata\": {{providerConfigMetadata}}\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchants/{{merchantId}}/surcharge-providers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchantId}}",
								"surcharge-providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Surcharge Providers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const timestamp = new Date().toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"console.log('Get All Providers URL will be:', pm.request.url.toString());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is an array of providers', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test('Each provider has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        const provider = jsonData[0];",
									"        pm.expect(provider).to.have.property('id');",
									"        pm.expect(provider).to.have.property('name');",
									"        pm.expect(provider).to.have.property('code');",
									"        pm.expect(provider).to.have.property('baseUrl');",
									"        pm.expect(provider).to.have.property('authenticationType');",
									"        pm.expect(provider).to.have.property('status');",
									"        pm.expect(provider).to.have.property('createdAt');",
									"        pm.expect(provider).to.have.property('updatedAt');",
									"        pm.expect(provider).to.have.property('createdBy');",
									"        pm.expect(provider).to.have.property('updatedBy');",
									"        ",
									"        // Save first provider data to environment variables",
									"        pm.environment.set('providerId', provider.id);",
									"        pm.environment.set('providerName', provider.name);",
									"        pm.environment.set('providerCode', provider.code);",
									"        pm.environment.set('providerDescription', provider.description || '');",
									"        pm.environment.set('providerBaseUrl', provider.baseUrl);",
									"        pm.environment.set('providerAuthType', provider.authenticationType);",
									"        pm.environment.set('providerStatus', provider.status);",
									"        ",
									"        console.log('Saved first provider data to environment:');",
									"        console.log('Provider ID:', provider.id);",
									"        console.log('Provider Name:', provider.name);",
									"        console.log('Provider Status:', provider.status);",
									"    } else {",
									"        console.log('No providers found in response');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchants/{{merchantId}}/surcharge-providers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchantId}}",
								"surcharge-providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Surcharge Provider by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const timestamp = new Date().toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Check if providerId is available",
									"const providerId = pm.environment.get('providerId');",
									"if (!providerId) {",
									"    console.error('Provider ID not found in environment. Please run Create Surcharge Provider first.');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"console.log('Get Provider by ID URL will be:', pm.request.url.toString());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('baseUrl');",
									"    pm.expect(jsonData).to.have.property('authenticationType');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('createdAt');",
									"    pm.expect(jsonData).to.have.property('updatedAt');",
									"    pm.expect(jsonData).to.have.property('createdBy');",
									"    pm.expect(jsonData).to.have.property('updatedBy');",
									"    ",
									"    // Save provider data to environment variables",
									"    pm.environment.set('providerId', jsonData.id);",
									"    pm.environment.set('providerName', jsonData.name);",
									"    pm.environment.set('providerCode', jsonData.code);",
									"    pm.environment.set('providerDescription', jsonData.description || '');",
									"    pm.environment.set('providerBaseUrl', jsonData.baseUrl);",
									"    pm.environment.set('providerAuthType', jsonData.authenticationType);",
									"    pm.environment.set('providerStatus', jsonData.status);",
									"    ",
									"    console.log('Provider details:');",
									"    console.log('Provider ID:', jsonData.id);",
									"    console.log('Provider Name:', jsonData.name);",
									"    console.log('Provider Status:', jsonData.status);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchants/{{merchantId}}/surcharge-providers/{{providerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchantId}}",
								"surcharge-providers",
								"{{providerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Surcharge Provider",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const timestamp = new Date().toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Check if providerId is available",
									"const providerId = pm.environment.get('providerId');",
									"if (!providerId) {",
									"    console.error('Provider ID not found in environment. Please run Create Surcharge Provider first.');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"console.log('Update Provider URL will be:', pm.request.url.toString());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('baseUrl');",
									"    pm.expect(jsonData).to.have.property('authenticationType');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('createdAt');",
									"    pm.expect(jsonData).to.have.property('updatedAt');",
									"    pm.expect(jsonData).to.have.property('createdBy');",
									"    pm.expect(jsonData).to.have.property('updatedBy');",
									"    ",
									"    // Save updated provider data to environment variables",
									"    pm.environment.set('providerId', jsonData.id);",
									"    pm.environment.set('providerName', jsonData.name);",
									"    pm.environment.set('providerCode', jsonData.code);",
									"    pm.environment.set('providerDescription', jsonData.description || '');",
									"    pm.environment.set('providerBaseUrl', jsonData.baseUrl);",
									"    pm.environment.set('providerAuthType', jsonData.authenticationType);",
									"    pm.environment.set('providerStatus', jsonData.status);",
									"    ",
									"    console.log('Updated provider details:');",
									"    console.log('Provider ID:', jsonData.id);",
									"    console.log('Provider Name:', jsonData.name);",
									"    console.log('Provider Status:', jsonData.status);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{providerName}} Updated\",\n    \"code\": \"{{providerCode}}\",\n    \"description\": \"{{providerDescription}} - Updated\",\n    \"baseUrl\": \"{{providerBaseUrl}}\",\n    \"authenticationType\": \"{{providerAuthType}}\",\n    \"credentialsSchema\": {{providerCredentialsSchema}},\n    \"configuration\": {\n        \"ConfigName\": \"{{providerConfigName}}\",\n        \"credentials\": {{providerConfigCredentials}},\n        \"timeout\": {{providerConfigTimeout}},\n        \"retryCount\": {{providerConfigRetryCount}},\n        \"retryDelay\": {{providerConfigRetryDelay}},\n        \"rateLimit\": {{providerConfigRateLimit}},\n        \"rateLimitPeriod\": {{providerConfigRateLimitPeriod}},\n        \"metadata\": {{providerConfigMetadata}}\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchants/{{merchantId}}/surcharge-providers/{{providerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchantId}}",
								"surcharge-providers",
								"{{providerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Surcharge Provider (Soft Delete)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const timestamp = new Date().toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Check if providerId is available",
									"const providerId = pm.environment.get('providerId');",
									"if (!providerId) {",
									"    console.error('Provider ID not found in environment. Please run Create Surcharge Provider first.');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"console.log('Delete Provider URL will be:', pm.request.url.toString());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response shows provider with DELETED status', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.equal('DELETED');",
									"    ",
									"    console.log('Provider soft deleted successfully:');",
									"    console.log('Provider ID:', jsonData.id);",
									"    console.log('Provider Name:', jsonData.name);",
									"    console.log('Provider Status:', jsonData.status);",
									"    ",
									"    // Keep provider data in environment for restore test",
									"    pm.environment.set('deletedProviderId', jsonData.id);",
									"    pm.environment.set('deletedProviderName', jsonData.name);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchants/{{merchantId}}/surcharge-providers/{{providerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchantId}}",
								"surcharge-providers",
								"{{providerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Restore Surcharge Provider",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const timestamp = new Date().toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Check if deleted provider ID is available",
									"const deletedProviderId = pm.environment.get('deletedProviderId');",
									"if (!deletedProviderId) {",
									"    console.error('Deleted Provider ID not found in environment. Please run Delete Surcharge Provider first.');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"console.log('Restore Provider URL will be:', pm.request.url.toString());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response shows provider with ACTIVE status', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.equal('ACTIVE');",
									"    ",
									"    console.log('Provider restored successfully:');",
									"    console.log('Provider ID:', jsonData.id);",
									"    console.log('Provider Name:', jsonData.name);",
									"    console.log('Provider Status:', jsonData.status);",
									"    ",
									"    // Update environment variables with restored provider data",
									"    pm.environment.set('providerId', jsonData.id);",
									"    pm.environment.set('providerName', jsonData.name);",
									"    pm.environment.set('providerCode', jsonData.code);",
									"    pm.environment.set('providerDescription', jsonData.description || '');",
									"    pm.environment.set('providerBaseUrl', jsonData.baseUrl);",
									"    pm.environment.set('providerAuthType', jsonData.authenticationType);",
									"    pm.environment.set('providerStatus', jsonData.status);",
									"    ",
									"    // Clear deleted provider variables",
									"    pm.environment.unset('deletedProviderId');",
									"    pm.environment.unset('deletedProviderName');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchants/{{merchantId}}/surcharge-providers/{{deletedProviderId}}/restore",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchantId}}",
								"surcharge-providers",
								"{{deletedProviderId}}",
								"restore"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Health Live",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"    pm.expect(jsonData).to.have.property('service');",
									"    pm.expect(jsonData).to.have.property('version');",
									"    ",
									"    // Verify status is 'healthy'",
									"    pm.expect(jsonData.status).to.equal('healthy');",
									"    ",
									"    console.log('Health Live Response:');",
									"    console.log('Status:', jsonData.status);",
									"    console.log('Service:', jsonData.service);",
									"    console.log('Version:', jsonData.version);",
									"    console.log('Timestamp:', jsonData.timestamp);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/health/live",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"health",
								"live"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health Ready",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"    pm.expect(jsonData).to.have.property('service');",
									"    pm.expect(jsonData).to.have.property('version');",
									"    pm.expect(jsonData).to.have.property('dependencies');",
									"    ",
									"    // Verify status is 'healthy'",
									"    pm.expect(jsonData.status).to.equal('healthy');",
									"    ",
									"    // Check database dependency",
									"    if (jsonData.dependencies && jsonData.dependencies.database) {",
									"        pm.expect(jsonData.dependencies.database).to.have.property('status');",
									"        pm.expect(jsonData.dependencies.database).to.have.property('responseTime');",
									"        pm.expect(jsonData.dependencies.database).to.have.property('version');",
									"        ",
									"        console.log('Database Health:');",
									"        console.log('Status:', jsonData.dependencies.database.status);",
									"        console.log('Response Time:', jsonData.dependencies.database.responseTime);",
									"        console.log('Version:', jsonData.dependencies.database.version);",
									"    }",
									"    ",
									"    console.log('Health Ready Response:');",
									"    console.log('Status:', jsonData.status);",
									"    console.log('Service:', jsonData.service);",
									"    console.log('Version:', jsonData.version);",
									"    console.log('Timestamp:', jsonData.timestamp);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/health/ready",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"health",
								"ready"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health (Legacy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"    pm.expect(jsonData).to.have.property('service');",
									"    pm.expect(jsonData).to.have.property('version');",
									"    ",
									"    // Verify status is 'healthy'",
									"    pm.expect(jsonData.status).to.equal('healthy');",
									"    ",
									"    console.log('Health (Legacy) Response:');",
									"    console.log('Status:', jsonData.status);",
									"    console.log('Service:', jsonData.service);",
									"    console.log('Version:', jsonData.version);",
									"    console.log('Timestamp:', jsonData.timestamp);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health Ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"    pm.expect(jsonData).to.have.property('service');",
									"    pm.expect(jsonData).to.have.property('version');",
									"    ",
									"    // Verify status is 'healthy'",
									"    pm.expect(jsonData.status).to.equal('healthy');",
									"    ",
									"    console.log('Health (Legacy) Response:');",
									"    console.log('Status:', jsonData.status);",
									"    console.log('Service:', jsonData.service);",
									"    console.log('Version:', jsonData.version);",
									"    console.log('Timestamp:', jsonData.timestamp);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/ping",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"ping"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Provider Examples",
			"item": [
				{
					"name": "Create Provider with OAuth2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const timestamp = new Date().toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"OAuth2 Test Provider\",\n    \"code\": \"OAUTH2\",\n    \"description\": \"OAuth2 Authentication Provider Example\",\n    \"baseUrl\": \"https://api.oauth2-provider.com\",\n    \"authenticationType\": \"OAUTH2\",\n    \"credentialsSchema\": {{providerCredentialsSchemaOAuth2}},\n    \"configuration\": {\n        \"ConfigName\": \"OAuth2 Production Config\",\n        \"credentials\": {{providerConfigCredentialsOAuth2}},\n        \"timeout\": {{providerConfigTimeout}},\n        \"retryCount\": {{providerConfigRetryCount}},\n        \"retryDelay\": {{providerConfigRetryDelay}},\n        \"rateLimit\": {{providerConfigRateLimit}},\n        \"rateLimitPeriod\": {{providerConfigRateLimitPeriod}},\n        \"metadata\": {{providerConfigMetadata}}\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchants/{{merchantId}}/surcharge-providers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchantId}}",
								"surcharge-providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Provider with API Key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const timestamp = new Date().toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"API Key Test Provider\",\n    \"code\": \"APIKEY\",\n    \"description\": \"API Key Authentication Provider Example\",\n    \"baseUrl\": \"https://api.apikey-provider.com\",\n    \"authenticationType\": \"API_KEY\",\n    \"credentialsSchema\": {{providerCredentialsSchemaAPIKey}},\n    \"configuration\": {\n        \"ConfigName\": \"API Key Production Config\",\n        \"credentials\": {{providerConfigCredentialsAPIKey}},\n        \"timeout\": {{providerConfigTimeout}},\n        \"retryCount\": {{providerConfigRetryCount}},\n        \"retryDelay\": {{providerConfigRetryDelay}},\n        \"rateLimit\": {{providerConfigRateLimit}},\n        \"rateLimitPeriod\": {{providerConfigRateLimitPeriod}},\n        \"metadata\": {{providerConfigMetadata}}\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchants/{{merchantId}}/surcharge-providers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchantId}}",
								"surcharge-providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Provider with Basic Auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const timestamp = new Date().toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Basic Auth Test Provider\",\n    \"code\": \"BASIC\",\n    \"description\": \"Basic Authentication Provider Example\",\n    \"baseUrl\": \"https://api.basic-provider.com\",\n    \"authenticationType\": \"BASIC\",\n    \"credentialsSchema\": {{providerCredentialsSchemaBasic}},\n    \"configuration\": {\n        \"ConfigName\": \"Basic Auth Production Config\",\n        \"credentials\": {{providerConfigCredentialsBasic}},\n        \"timeout\": {{providerConfigTimeout}},\n        \"retryCount\": {{providerConfigRetryCount}},\n        \"retryDelay\": {{providerConfigRetryDelay}},\n        \"rateLimit\": {{providerConfigRateLimit}},\n        \"rateLimitPeriod\": {{providerConfigRateLimitPeriod}},\n        \"metadata\": {{providerConfigMetadata}}\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/merchants/{{merchantId}}/surcharge-providers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"merchants",
								"{{merchantId}}",
								"surcharge-providers"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Surcharge Operations",
			"item": [
				{
					"name": "Surcharge Auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate new random transaction IDs for initial Surcharge Auth",
									"const generatedCorrelationId = Math.floor(1000000000 + Math.random() * 9000000000).toString(); // 10-digit bigint",
									"const generatedMerchantTransactionId = `mtxn_${generatedCorrelationId}`; // Use correlation ID instead of GUID",
									"pm.environment.set('surchargeCorrelationId', generatedCorrelationId);",
									"pm.environment.set('surchargeMerchantTransactionId', generatedMerchantTransactionId);",
									"",
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Log values for debugging",
									"console.log('Surcharge Auth Request:');",
									"console.log('Merchant ID:', merchantId);",
									"console.log('API Key:', apiKey);",
									"console.log('Provider Code:', pm.environment.get('providerCode') || 'INTERPAYMENTS_PROD_001');",
									"console.log('BINVALUE:', (pm.environment.get('surchargeBinValue') || '4111111111111111').substring(0, 6));",
									"console.log('SURCHARGE PROCESSOR:', pm.environment.get('surchargeProcessor') || 'default');",
									"console.log('Amount:', pm.environment.get('surchargeAmount') || '100.00');",
									"console.log('Correlation ID:', generatedCorrelationId);",
									"console.log('Merchant Transaction ID:', generatedMerchantTransactionId);",
									"console.log('POSTALCODE:', pm.environment.get('surchargePostalCode') || '78717');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed the reference to jsonData",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Response has required fields', function () {",
									"    ",
									"        ",
									"    if (jsonData) {",
									"        pm.expect(jsonData).to.have.property('surchargeTransactionId');",
									"        pm.expect(jsonData).to.have.property('correlationId');",
									"        pm.expect(jsonData).to.have.property('merchantTransactionId');",
									"        pm.expect(jsonData).to.have.property('providerTransactionId');",
									"        pm.expect(jsonData).to.have.property('status');",
									"        pm.expect(jsonData).to.have.property('originalAmount');",
									"        pm.expect(jsonData).to.have.property('surchargeAmount');",
									"        pm.expect(jsonData).to.have.property('totalAmount');",
									"        pm.expect(jsonData).to.have.property('provider');        ",
									"        ",
									"        // Save transaction data to environment for follow-up requests",
									"        pm.environment.set('surchargeTransactionId', jsonData.surchargeTransactionId);",
									"        pm.environment.set('surchargeProviderTransactionId', jsonData.providerTransactionId);",
									"        pm.environment.set('surchargeMerchantTransactionId', jsonData.merchantTransactionId);",
									"        pm.environment.set('surchargeStatus', jsonData.status);",
									"        pm.environment.set('surchargeAmount', jsonData.surchargeAmount);",
									"        pm.environment.set('surchargeTotalAmount', jsonData.totalAmount);",
									"        ",
									"        // Save the original transaction IDs that were sent in the request",
									"        pm.environment.set('surchargeCorrelationId', pm.environment.get('surchargeCorrelationId'));",
									"        ",
									"        console.log('Surcharge Auth Response:');",
									"        console.log('Surcharge Transaction ID:', jsonData.surchargeTransactionId);",
									"        console.log('Merchant Transaction ID:', jsonData.merchantTransactionId);",
									"        console.log('Correlation ID:', pm.environment.get('surchargeCorrelationId'));",
									"        console.log('Provider Transaction ID:', jsonData.providerTransactionId || 'null');",
									"        console.log('Status:', jsonData.status);",
									"        console.log('Surcharge Amount:', jsonData.surchargeAmount);",
									"        console.log('Total Amount:', jsonData.totalAmount);",
									"        ",
									"        // Verify status is PENDING or AUTHORIZED",
									"        pm.expect(['ok','PENDING', 'AUTHORIZED', 'COMPLETED']).to.include(jsonData.status);",
									"        ",
									"        // Verify amounts are positive",
									"        pm.expect(parseFloat(jsonData.surchargeAmount)).to.be.at.least(0);",
									"        pm.expect(parseFloat(jsonData.totalAmount)).to.be.at.least(0);",
									"    }",
									"});",
									"",
									"pm.test('Response structure validation', function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData) {",
									"        // Check for optional fields",
									"        if (jsonData.providerResponse) {",
									"            pm.expect(jsonData.providerResponse).to.be.an('object');",
									"        }",
									"        ",
									"        if (jsonData.errorCode) {",
									"            pm.expect(jsonData.errorCode).to.be.a('string');",
									"        }",
									"        ",
									"        if (jsonData.errorMessage) {",
									"            pm.expect(jsonData.errorMessage).to.be.a('string');",
									"        }",
									"    }",
									"});",
									"",
									"// Log values for debugging",
									"console.log('Surcharge Auth Response:');",
									"console.log('Transaction ID:', jsonData.surchargeTransactionId);",
									"console.log('Merchant Transaction ID:', jsonData.merchantTransactionId);",
									"console.log('Correlation ID:', pm.environment.get('surchargeCorrelationId'));",
									"console.log('Provider Transaction ID:', jsonData.providerTransactionId);",
									"console.log('Status:', jsonData.status);",
									"console.log('Surcharge Amount:', jsonData.surchargeAmount);",
									"console.log('Total Amount:', jsonData.totalAmount);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerCode\": \"{{providerCode}}\",\n    \"binValue\": \"{{surchargeBinValue}}\",\n    \"surchargeProcessor\": \"{{surchargeProcessor}}\",\n    \"amount\": {{amount}},\n    \"totalAmount\": {{amount}},\n    \"country\": \"{{surchargeCountry}}\",\n    \"postalCode\": \"{{surchargePostalCode}}\",\n    \"campaign\": {{surchargeCampaign}},\n    \"data\": {{surchargeData}},\n    \"correlationId\": \"{{surchargeCorrelationId}}\",\n    \"merchantTransactionId\": \"{{surchargeMerchantTransactionId}}\",\n    \"cardToken\": \"{{surchargeCardToken}}\",\n    \"entryMethod\": \"{{surchargeEntryMethod}}\",\n    \"nonSurchargableAmount\": {{surchargeNonSurchargableAmount}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/surcharge/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"surcharge",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Surcharge Auth Min",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate new random transaction IDs for initial Surcharge Auth",
									"const generatedCorrelationId = Math.floor(1000000000 + Math.random() * 9000000000).toString(); // 10-digit bigint",
									"const generatedMerchantTransactionId = `mtxn_${generatedCorrelationId}`; // Use correlation ID instead of GUID",
									"pm.environment.set('surchargeCorrelationId', generatedCorrelationId);",
									"pm.environment.set('surchargeMerchantTransactionId', generatedMerchantTransactionId);",
									"",
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Log values for debugging",
									"console.log('Surcharge Auth Request:');",
									"console.log('Merchant ID:', merchantId);",
									"console.log('API Key:', apiKey);",
									"console.log('Provider Code:', pm.environment.get('providerCode') || 'INTERPAYMENTS_PROD_001');",
									"console.log('BINVALUE:', (pm.environment.get('surchargeBinValue') || '4111111111111111').substring(0, 6));",
									"console.log('SURCHARGE PROCESSOR:', pm.environment.get('surchargeProcessor') || 'default');",
									"console.log('Amount:', pm.environment.get('surchargeAmount') || '100.00');",
									"console.log('Correlation ID:', generatedCorrelationId);",
									"console.log('Merchant Transaction ID:', generatedMerchantTransactionId);",
									"console.log('POSTALCODE:', pm.environment.get('surchargePostalCode') || '78717');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed the reference to jsonData",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Response has required fields', function () {",
									"    ",
									"        ",
									"    if (jsonData) {",
									"        pm.expect(jsonData).to.have.property('surchargeTransactionId');",
									"        pm.expect(jsonData).to.have.property('correlationId');",
									"        pm.expect(jsonData).to.have.property('merchantTransactionId');",
									"        pm.expect(jsonData).to.have.property('providerTransactionId');",
									"        pm.expect(jsonData).to.have.property('status');",
									"        pm.expect(jsonData).to.have.property('originalAmount');",
									"        pm.expect(jsonData).to.have.property('surchargeAmount');",
									"        pm.expect(jsonData).to.have.property('totalAmount');",
									"        pm.expect(jsonData).to.have.property('provider');        ",
									"        ",
									"        // Save transaction data to environment for follow-up requests",
									"        pm.environment.set('surchargeTransactionId', jsonData.surchargeTransactionId);",
									"        pm.environment.set('surchargeProviderTransactionId', jsonData.providerTransactionId);",
									"        pm.environment.set('surchargeMerchantTransactionId', jsonData.merchantTransactionId);",
									"        pm.environment.set('surchargeStatus', jsonData.status);",
									"        pm.environment.set('surchargeAmount', jsonData.surchargeAmount);",
									"        pm.environment.set('surchargeTotalAmount', jsonData.totalAmount);",
									"        ",
									"        // Save the original transaction IDs that were sent in the request",
									"        pm.environment.set('surchargeCorrelationId', pm.environment.get('surchargeCorrelationId'));",
									"        ",
									"        console.log('Surcharge Auth Response:');",
									"        console.log('Surcharge Transaction ID:', jsonData.surchargeTransactionId);",
									"        console.log('Merchant Transaction ID:', jsonData.merchantTransactionId);",
									"        console.log('Correlation ID:', pm.environment.get('surchargeCorrelationId'));",
									"        console.log('Provider Transaction ID:', jsonData.providerTransactionId || 'null');",
									"        console.log('Status:', jsonData.status);",
									"        console.log('Surcharge Amount:', jsonData.surchargeAmount);",
									"        console.log('Total Amount:', jsonData.totalAmount);",
									"        ",
									"        // Verify status is PENDING or AUTHORIZED",
									"        pm.expect(['ok','PENDING', 'AUTHORIZED', 'COMPLETED']).to.include(jsonData.status);",
									"        ",
									"        // Verify amounts are positive",
									"        pm.expect(parseFloat(jsonData.surchargeAmount)).to.be.at.least(0);",
									"        pm.expect(parseFloat(jsonData.totalAmount)).to.be.at.least(0);",
									"    }",
									"});",
									"",
									"pm.test('Response structure validation', function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData) {",
									"        // Check for optional fields",
									"        if (jsonData.providerResponse) {",
									"            pm.expect(jsonData.providerResponse).to.be.an('object');",
									"        }",
									"        ",
									"        if (jsonData.errorCode) {",
									"            pm.expect(jsonData.errorCode).to.be.a('string');",
									"        }",
									"        ",
									"        if (jsonData.errorMessage) {",
									"            pm.expect(jsonData.errorMessage).to.be.a('string');",
									"        }",
									"    }",
									"});",
									"",
									"// Log values for debugging",
									"console.log('Surcharge Auth Response:');",
									"console.log('Transaction ID:', jsonData.surchargeTransactionId);",
									"console.log('Merchant Transaction ID:', jsonData.merchantTransactionId);",
									"console.log('Correlation ID:', pm.environment.get('surchargeCorrelationId'));",
									"console.log('Provider Transaction ID:', jsonData.providerTransactionId);",
									"console.log('Status:', jsonData.status);",
									"console.log('Surcharge Amount:', jsonData.surchargeAmount);",
									"console.log('Total Amount:', jsonData.totalAmount);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerCode\": \"{{providerCode}}\",\n    \"binValue\": \"{{surchargeBinValue}}\",\n    \"surchargeProcessor\": \"{{surchargeProcessor}}\",\n    \"amount\": {{amount}},\n    \"country\": \"{{surchargeCountry}}\",\n    \"postalCode\": \"{{surchargePostalCode}}\",\n    \"correlationId\": \"{{surchargeCorrelationId}}\",\n    \"merchantTransactionId\": \"{{surchargeMerchantTransactionId}}\",\n    \"entryMethod\": \"{{surchargeEntryMethod}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/surcharge/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"surcharge",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Surcharge Auth Followup",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Surcharge Auth Followup: Use values from previous Surcharge Auth response",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Check for required followup variables",
									"const surchargeFollowupAmount = pm.environment.get('surchargeFollowupAmount');",
									"if (!surchargeFollowupAmount) {",
									"    console.error('surchargeFollowupAmount not found in environment. Please set this variable before running followup.');",
									"    return;",
									"}",
									"",
									"// Get transaction IDs from previous Surcharge Auth response",
									"const correlationId = pm.environment.get('surchargeCorrelationId');",
									"const merchantTransactionId = pm.environment.get('surchargeMerchantTransactionId');",
									"const providerTransactionId = pm.environment.get('surchargeProviderTransactionId');",
									"",
									"if (!correlationId || !merchantTransactionId) {",
									"    console.error('Transaction IDs not found. Please run Surcharge Auth first to get the required transaction IDs.');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Log values for debugging",
									"console.log('Surcharge Auth Followup Request:');",
									"console.log('Merchant ID:', merchantId);",
									"console.log('API Key:', apiKey);",
									"console.log('Provider Code:', pm.environment.get('providerCode') || 'INTERPAYMENTS_PROD_001');",
									"console.log('Correlation ID:', correlationId);",
									"console.log('Merchant Transaction ID:', merchantTransactionId);",
									"console.log('Provider Transaction ID:', providerTransactionId);",
									"console.log('Followup Amount:', surchargeFollowupAmount);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData.data) {",
									"        pm.expect(jsonData.data).to.have.property('surchargeTransactionId');",
									"        pm.expect(jsonData.data).to.have.property('merchantTransactionId');",
									"        pm.expect(jsonData.data).to.have.property('status');",
									"        pm.expect(jsonData.data).to.have.property('surchargeAmount');",
									"        pm.expect(jsonData.data).to.have.property('totalAmount');",
									"        pm.expect(jsonData.data).to.have.property('providerTransactionId');",
									"        // Save follow-up transaction data to environment",
									"        pm.environment.set('surchargeFollowupTransactionId', jsonData.data.surchargeTransactionId);",
									"        pm.environment.set('surchargeFollowupMerchantTransactionId', jsonData.data.merchantTransactionId);",
									"        pm.environment.set('surchargeFollowupStatus', jsonData.data.status);",
									"        pm.environment.set('surchargeFollowupAmount', jsonData.data.surchargeAmount);",
									"        pm.environment.set('surchargeFollowupTotalAmount', jsonData.data.totalAmount);",
									"        pm.environment.set('surchargeProviderTransactionId', jsonData.data.providerTransactionId);",
									"        ",
									"        console.log('Surcharge Auth Followup Response:');",
									"        console.log('Surcharge Transaction ID:', jsonData.data.surchargeTransactionId);",
									"        console.log('Merchant Transaction ID:', jsonData.data.merchantTransactionId);",
									"        console.log('Provider Transaction ID:', jsonData.data.providerTransactionId);",
									"        console.log('Status:', jsonData.data.status);",
									"        console.log('Surcharge Amount:', jsonData.data.surchargeAmount);",
									"        console.log('Total Amount:', jsonData.data.totalAmount);",
									"        ",
									"        // Verify status is PENDING or AUTHORIZED",
									"        pm.expect([ 'ok', 'PENDING', 'AUTHORIZED', 'COMPLETED']).to.include(jsonData.data.status);",
									"        ",
									"        // Verify amounts are positive",
									"        pm.expect(parseFloat(jsonData.data.surchargeAmount)).to.be.at.least(0);",
									"        pm.expect(parseFloat(jsonData.data.totalAmount)).to.be.at.least(0);",
									"    }",
									"});",
									"",
									"pm.test('Response structure validation', function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    if (jsonData.data) {",
									"        // Check for optional fields",
									"        if (jsonData.data.providerResponse) {",
									"            pm.expect(jsonData.data.providerResponse).to.be.an('object');",
									"        }",
									"        ",
									"        if (jsonData.data.errorCode) {",
									"            pm.expect(jsonData.data.errorCode).to.be.a('string');",
									"        }",
									"        ",
									"        if (jsonData.data.errorMessage) {",
									"            pm.expect(jsonData.data.errorMessage).to.be.a('string');",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"providerCode\": \"{{providerCode}}\",\n    \"binValue\": \"{{surchargeBinValue}}\",\n    \"surchargeProcessor\": \"{{surchargeProcessor}}\",\n    \"amount\": {{surchargeFollowupAmount}},\n    \"totalAmount\": {{surchargeFollowupTotalAmount}},\n    \"country\": \"{{surchargeCountry}}\",\n    \"postalCode\": \"{{surchargePostalCode}}\",\n    \"campaign\": {{surchargeCampaign}},\n    \"data\": {{surchargeData}},\n    \"correlationId\": \"{{surchargeCorrelationId}}\",\n    \"merchantTransactionId\": \"{{surchargeMerchantTransactionId}}\",\n    \"providerTransactionId\": \"{{surchargeProviderTransactionId}}\",\n    \"cardToken\": \"{{surchargeCardToken}}\",\n    \"entryMethod\": \"{{surchargeEntryMethod}}\",\n    \"nonSurchargableAmount\": {{surchargeNonSurchargableAmount}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/surcharge/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"surcharge",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Surcharge Sale",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Get transaction ID from previous auth",
									"const transactionId = pm.environment.get('surchargeTransactionId');",
									"if (!transactionId) {",
									"    console.error('Transaction ID not found. Please run Surcharge Auth first.');",
									"    return;",
									"}",
									"",
									"// Get request body",
									"const requestBody = JSON.stringify({",
									"    transactionId: transactionId,",
									"    amount: parseFloat(pm.environment.get('surchargeAmount') || '100.00'),",
									"    metadata: {",
									"        source: 'postman-test',",
									"        testId: pm.variables.replaceIn('{{$guid}}')",
									"    }",
									"});",
									"",
									"// Create data string to sign with pipe separators",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Set the request body",
									"pm.request.body.raw = requestBody;",
									"",
									"console.log('Surcharge Sale Request:');",
									"console.log('Transaction ID:', transactionId);",
									"console.log('Request Body:', requestBody);",
									"console.log('BINVALUE:', (pm.environment.get('surchargeBinValue') || '4111111111111111').substring(0, 6));",
									"console.log('POSTALCODE:', pm.environment.get('surchargePostalCode') || '78717');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('data');",
									"    ",
									"    if (jsonData.data) {",
									"        pm.expect(jsonData.data).to.have.property('transactionId');",
									"        pm.expect(jsonData.data).to.have.property('status');",
									"        pm.expect(jsonData.data).to.have.property('updatedAt');",
									"        ",
									"        console.log('Surcharge Sale Response:');",
									"        console.log('Transaction ID:', jsonData.data.transactionId);",
									"        console.log('Status:', jsonData.data.status);",
									"        ",
									"        // Verify status is COMPLETED",
									"        pm.expect(jsonData.data.status).to.equal('COMPLETED');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transactionId\": \"{{surchargeTransactionId}}\",\n    \"amount\": {{surchargeAmount}},\n    \"metadata\": {\n        \"source\": \"postman-test\",\n        \"testId\": \"{{$guid}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/surcharge/sale",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"surcharge",
								"sale"
							]
						}
					},
					"response": []
				},
				{
					"name": "Surcharge Refund",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Get transaction ID from previous auth",
									"const transactionId = pm.environment.get('surchargeTransactionId');",
									"if (!transactionId) {",
									"    console.error('Transaction ID not found. Please run Surcharge Auth first.');",
									"    return;",
									"}",
									"",
									"// Get request body",
									"const requestBody = JSON.stringify({",
									"    transactionId: transactionId,",
									"    amount: parseFloat(pm.environment.get('surchargeAmount') || '100.00'),",
									"    reason: pm.environment.get('refundReason') || 'Customer request',",
									"    metadata: {",
									"        source: 'postman-test',",
									"        testId: pm.variables.replaceIn('{{$guid}}')",
									"    }",
									"});",
									"",
									"// Create data string to sign with pipe separators",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Set the request body",
									"pm.request.body.raw = requestBody;",
									"",
									"console.log('Surcharge Refund Request:');",
									"console.log('Transaction ID:', transactionId);",
									"console.log('Request Body:', requestBody);",
									"console.log('BINVALUE:', (pm.environment.get('surchargeBinValue') || '4111111111111111').substring(0, 6));",
									"console.log('POSTALCODE:', pm.environment.get('surchargePostalCode') || '78717');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('data');",
									"    ",
									"    if (jsonData.data) {",
									"        pm.expect(jsonData.data).to.have.property('transactionId');",
									"        pm.expect(jsonData.data).to.have.property('status');",
									"        pm.expect(jsonData.data).to.have.property('updatedAt');",
									"        ",
									"        console.log('Surcharge Refund Response:');",
									"        console.log('Transaction ID:', jsonData.data.transactionId);",
									"        console.log('Status:', jsonData.data.status);",
									"        ",
									"        // Verify status is REFUNDED",
									"        pm.expect(jsonData.data.status).to.equal('REFUNDED');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transactionId\": \"{{surchargeTransactionId}}\",\n    \"amount\": {{surchargeAmount}},\n    \"reason\": \"{{refundReason}}\",\n    \"metadata\": {\n        \"source\": \"postman-test\",\n        \"testId\": \"{{$guid}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/surcharge/refund",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"surcharge",
								"refund"
							]
						}
					},
					"response": []
				},
				{
					"name": "Surcharge Cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Get transaction ID from previous auth",
									"const transactionId = pm.environment.get('surchargeTransactionId');",
									"if (!transactionId) {",
									"    console.error('Transaction ID not found. Please run Surcharge Auth first.');",
									"    return;",
									"}",
									"",
									"// Get request body",
									"const requestBody = JSON.stringify({",
									"    transactionId: transactionId,",
									"    reason: pm.environment.get('cancelReason') || 'Customer request',",
									"    metadata: {",
									"        source: 'postman-test',",
									"        testId: pm.variables.replaceIn('{{$guid}}')",
									"    }",
									"});",
									"",
									"// Create data string to sign with pipe separators",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"// Set the request body",
									"pm.request.body.raw = requestBody;",
									"",
									"console.log('Surcharge Cancel Request:');",
									"console.log('Transaction ID:', transactionId);",
									"console.log('Request Body:', requestBody);",
									"console.log('BINVALUE:', (pm.environment.get('surchargeBinValue') || '4111111111111111').substring(0, 6));",
									"console.log('POSTALCODE:', pm.environment.get('surchargePostalCode') || '78717');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('data');",
									"    ",
									"    if (jsonData.data) {",
									"        pm.expect(jsonData.data).to.have.property('transactionId');",
									"        pm.expect(jsonData.data).to.have.property('status');",
									"        pm.expect(jsonData.data).to.have.property('updatedAt');",
									"        ",
									"        console.log('Surcharge Cancel Response:');",
									"        console.log('Transaction ID:', jsonData.data.transactionId);",
									"        console.log('Status:', jsonData.data.status);",
									"        ",
									"        // Verify status is CANCELLED",
									"        pm.expect(jsonData.data.status).to.equal('CANCELLED');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transactionId\": \"{{surchargeTransactionId}}\",\n    \"reason\": \"{{cancelReason}}\",\n    \"metadata\": {\n        \"source\": \"postman-test\",\n        \"testId\": \"{{$guid}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/surcharge/cancel",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"surcharge",
								"cancel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Surcharge Transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate timestamp and nonce",
									"const now = new Date();",
									"const timestamp = now.toISOString();",
									"const nonce = Math.random().toString(36).substring(2, 15);",
									"",
									"// Get API secret from environment",
									"const apiSecret = pm.environment.get('apiSecret');",
									"if (!apiSecret) {",
									"    console.error('API Secret not found in environment');",
									"    return;",
									"}",
									"",
									"// Get merchant ID from environment",
									"const merchantId = pm.environment.get('merchantId');",
									"if (!merchantId) {",
									"    console.error('Merchant ID not found in environment');",
									"    return;",
									"}",
									"",
									"// Get API key from environment",
									"const apiKey = pm.environment.get('apiKey');",
									"if (!apiKey) {",
									"    console.error('API Key not found in environment');",
									"    return;",
									"}",
									"",
									"// Get transaction ID from previous auth",
									"const transactionId = pm.environment.get('surchargeTransactionId');",
									"if (!transactionId) {",
									"    console.error('Transaction ID not found. Please run Surcharge Auth first.');",
									"    return;",
									"}",
									"",
									"// Create data string to sign with pipe separators",
									"const dataToSign = `${timestamp}|${nonce}|${merchantId}|${apiKey}`;",
									"",
									"// Generate HMAC-SHA256 signature",
									"const signature = CryptoJS.HmacSHA256(dataToSign, apiSecret).toString(CryptoJS.enc.Base64);",
									"",
									"// Set headers",
									"pm.request.headers.add({ key: 'X-Merchant-ID', value: merchantId });",
									"pm.request.headers.add({ key: 'X-API-Key', value: apiKey });",
									"pm.request.headers.add({ key: 'X-Timestamp', value: timestamp });",
									"pm.request.headers.add({ key: 'X-Nonce', value: nonce });",
									"pm.request.headers.add({ key: 'X-Signature', value: signature });",
									"",
									"console.log('Get Surcharge Transaction Request:');",
									"console.log('Transaction ID:', transactionId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify response",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has required fields', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('data');",
									"    ",
									"    if (jsonData.data) {",
									"        pm.expect(jsonData.data).to.have.property('transactionId');",
									"        pm.expect(jsonData.data).to.have.property('merchantTransactionId');",
									"        pm.expect(jsonData.data).to.have.property('status');",
									"        pm.expect(jsonData.data).to.have.property('surchargeAmount');",
									"        pm.expect(jsonData.data).to.have.property('totalAmount');",
									"        pm.expect(jsonData.data).to.have.property('providerCode');",
									"        pm.expect(jsonData.data).to.have.property('createdAt');",
									"        pm.expect(jsonData.data).to.have.property('updatedAt');",
									"        ",
									"        console.log('Get Surcharge Transaction Response:');",
									"        console.log('Transaction ID:', jsonData.data.transactionId);",
									"        console.log('Merchant Transaction ID:', jsonData.data.merchantTransactionId);",
									"        console.log('Status:', jsonData.data.status);",
									"        console.log('Surcharge Amount:', jsonData.data.surchargeAmount);",
									"        console.log('Total Amount:', jsonData.data.totalAmount);",
									"        console.log('Provider Code:', jsonData.data.providerCode);",
									"        console.log('Created At:', jsonData.data.createdAt);",
									"        console.log('Updated At:', jsonData.data.updatedAt);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/surcharge/transactions/{{surchargeTransactionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"surcharge",
								"transactions",
								"{{surchargeTransactionId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5292",
			"type": "string"
		},
		{
			"key": "merchantId",
			"value": "DEV001",
			"type": "string"
		},
		{
			"key": "externalMerchantId",
			"value": "EXT001",
			"type": "string"
		},
		{
			"key": "externalMerchantGuid",
			"value": "00000000-0000-0000-0000-000000000000",
			"type": "string"
		},
		{
			"key": "apiKey",
			"value": "",
			"type": "string"
		},
		{
			"key": "apiSecret",
			"value": "",
			"type": "string"
		},
		{
			"key": "statusId",
			"value": "00000000-0000-0000-0000-000000000000",
			"type": "string"
		},
		{
			"key": "nicn",
			"value": "NICN001",
			"type": "string"
		},
		{
			"key": "nicn1",
			"value": "NICN001",
			"type": "string"
		},
		{
			"key": "nicn2",
			"value": "NICN002",
			"type": "string"
		},
		{
			"key": "processor",
			"value": "default",
			"type": "string"
		},
		{
			"key": "amount",
			"value": "100.00",
			"type": "string"
		},
		{
			"key": "totalAmount",
			"value": "100.00",
			"type": "string"
		},
		{
			"key": "country",
			"value": "USA",
			"type": "string"
		},
		{
			"key": "region",
			"value": "78717",
			"type": "string"
		},
		{
			"key": "campaign",
			"value": "[\"SUMMER2024\"]",
			"type": "string"
		},
		{
			"key": "data",
			"value": "[\"ECOMMERCE\"]",
			"type": "string"
		},
		{
			"key": "sTxId",
			"value": "STX001",
			"type": "string"
		},
		{
			"key": "sTxId1",
			"value": "STX001",
			"type": "string"
		},
		{
			"key": "sTxId2",
			"value": "STX002",
			"type": "string"
		},
		{
			"key": "mTxId",
			"value": "MTX001",
			"type": "string"
		},
		{
			"key": "mTxId1",
			"value": "MTX001",
			"type": "string"
		},
		{
			"key": "mTxId2",
			"value": "MTX002",
			"type": "string"
		},
		{
			"key": "cardToken",
			"value": "CARD001",
			"type": "string"
		},
		{
			"key": "cardToken1",
			"value": "CARD001",
			"type": "string"
		},
		{
			"key": "cardToken2",
			"value": "CARD002",
			"type": "string"
		},
		{
			"key": "entryMethod",
			"value": "DIPPED",
			"type": "string"
		},
		{
			"key": "nonSurchargableAmount",
			"value": "0",
			"type": "string"
		},
		{
			"key": "apiKeyName",
			"value": "Test API Key",
			"type": "string"
		},
		{
			"key": "apiKeyDescription",
			"value": "Test API Key Description",
			"type": "string"
		},
		{
			"key": "apiKeyRateLimit",
			"value": "1000",
			"type": "string"
		},
		{
			"key": "apiKeyAllowedEndpoints",
			"value": "[\"/api/v1/transactions\", \"/api/v1/batch\"]",
			"type": "string"
		},
		{
			"key": "apiKeyExpirationDays",
			"value": "30",
			"type": "string"
		},
		{
			"key": "apiKeyId",
			"value": "",
			"type": "string"
		},
		{
			"key": "apiKeyStatus",
			"value": "ACTIVE",
			"type": "string"
		},
		{
			"key": "apiKeyPurpose",
			"value": "INITIAL",
			"type": "string"
		},
		{
			"key": "merchantName",
			"value": "Test Merchant",
			"type": "string"
		},
		{
			"key": "adminUserId",
			"value": "admin123",
			"type": "string"
		},
		{
			"key": "onboardingReference",
			"value": "TEST-REF-001",
			"type": "string"
		},
		{
			"key": "providerName",
			"value": "Test Provider",
			"type": "string"
		},
		{
			"key": "providerCode",
			"value": "TEST",
			"type": "string"
		},
		{
			"key": "providerDescription",
			"value": "Test Surcharge Provider",
			"type": "string"
		},
		{
			"key": "providerBaseUrl",
			"value": "https://api.test-provider.com",
			"type": "string"
		},
		{
			"key": "providerAuthType",
			"value": "JWT",
			"type": "string"
		},
		{
			"key": "providerCredentialsSchema",
			"value": "{\"name\":\"JWT Authentication\",\"description\":\"JSON Web Token based authentication\",\"version\":\"1.0\",\"required_fields\":[{\"name\":\"jwt_token\",\"type\":\"jwt\",\"description\":\"JSON Web Token for authentication\",\"displayName\":\"JWT Token\",\"required\":true,\"sensitive\":true,\"minLength\":1,\"maxLength\":2000}],\"optional_fields\":[{\"name\":\"token_type\",\"type\":\"string\",\"description\":\"Token type (e.g., Bearer)\",\"displayName\":\"Token Type\",\"required\":false,\"sensitive\":false,\"defaultValue\":\"Bearer\",\"allowedValues\":[\"Bearer\",\"JWT\"]}]}",
			"type": "string"
		},
		{
			"key": "providerCredentialsSchemaJWT",
			"value": "{\"name\":\"JWT Authentication\",\"description\":\"JSON Web Token based authentication\",\"version\":\"1.0\",\"required_fields\":[{\"name\":\"jwt_token\",\"type\":\"jwt\",\"description\":\"JSON Web Token for authentication\",\"displayName\":\"JWT Token\",\"required\":true,\"sensitive\":true,\"minLength\":1,\"maxLength\":2000}],\"optional_fields\":[{\"name\":\"token_type\",\"type\":\"string\",\"description\":\"Token type (e.g., Bearer)\",\"displayName\":\"Token Type\",\"required\":false,\"sensitive\":false,\"defaultValue\":\"Bearer\",\"allowedValues\":[\"Bearer\",\"JWT\"]}]}",
			"type": "string"
		},
		{
			"key": "providerCredentialsSchemaOAuth2",
			"value": "{\"name\":\"OAuth 2.0 Authentication\",\"description\":\"OAuth 2.0 client credentials flow\",\"version\":\"1.0\",\"required_fields\":[{\"name\":\"client_id\",\"type\":\"client_id\",\"description\":\"OAuth 2.0 client identifier\",\"displayName\":\"Client ID\",\"required\":true,\"sensitive\":false,\"minLength\":1,\"maxLength\":255},{\"name\":\"client_secret\",\"type\":\"client_secret\",\"description\":\"OAuth 2.0 client secret\",\"displayName\":\"Client Secret\",\"required\":true,\"sensitive\":true,\"minLength\":1,\"maxLength\":255},{\"name\":\"token_url\",\"type\":\"url\",\"description\":\"OAuth 2.0 token endpoint URL\",\"displayName\":\"Token URL\",\"required\":true,\"sensitive\":false,\"pattern\":\"^https?://.+\"}],\"optional_fields\":[{\"name\":\"scope\",\"type\":\"string\",\"description\":\"OAuth 2.0 scope (optional)\",\"displayName\":\"Scope\",\"required\":false,\"sensitive\":false,\"maxLength\":500}]}",
			"type": "string"
		},
		{
			"key": "providerCredentialsSchemaAPIKey",
			"value": "{\"name\":\"API Key Authentication\",\"description\":\"API key based authentication for surcharge provider\",\"version\":\"1.0\",\"required_fields\":[{\"name\":\"api_key\",\"type\":\"api_key\",\"description\":\"API key for authentication\",\"displayName\":\"API Key\",\"required\":true,\"sensitive\":true,\"minLength\":1,\"maxLength\":500},{\"name\":\"api_key_header\",\"type\":\"string\",\"description\":\"HTTP header name for the API key\",\"displayName\":\"API Key Header\",\"required\":true,\"sensitive\":false,\"defaultValue\":\"X-API-Key\",\"minLength\":1,\"maxLength\":100}],\"optional_fields\":[{\"name\":\"timeout\",\"type\":\"integer\",\"description\":\"Request timeout in seconds\",\"displayName\":\"Timeout\",\"required\":false,\"sensitive\":false,\"defaultValue\":\"30\",\"minLength\":1,\"maxLength\":3}]}",
			"type": "string"
		},
		{
			"key": "providerCredentialsSchemaBasic",
			"value": "{\"name\":\"Basic Authentication\",\"description\":\"Username and password authentication\",\"version\":\"1.0\",\"required_fields\":[{\"name\":\"username\",\"type\":\"string\",\"description\":\"Username for authentication\",\"displayName\":\"Username\",\"required\":true,\"sensitive\":false,\"minLength\":1,\"maxLength\":100},{\"name\":\"password\",\"type\":\"password\",\"description\":\"Password for authentication\",\"displayName\":\"Password\",\"required\":true,\"sensitive\":true,\"minLength\":1,\"maxLength\":255}]}",
			"type": "string"
		},
		{
			"key": "providerStatus",
			"value": "ACTIVE",
			"type": "string"
		},
		{
			"key": "providerId",
			"value": "",
			"type": "string"
		},
		{
			"key": "deletedProviderId",
			"value": "",
			"type": "string"
		},
		{
			"key": "deletedProviderName",
			"value": "",
			"type": "string"
		},
		{
			"key": "providerConfigName",
			"value": "Production Config",
			"type": "string"
		},
		{
			"key": "providerConfigCredentials",
			"value": "{\"jwt_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE3MzcwNjU3ODAsIm5hbWUiOiJ0ZXN0LXByb3ZpZGVyIiwiaWQiOiI2ajJjeGNnbWo0Z3k2dDIxajZudGhubDZvIiwiZGF0YSI6WyJ0ZXN0LXByb3ZpZGVyIl0sImUiOiJ0ZXN0In0.YtftW6Ev0WlMVfjwqJFZLJUWyL0UnCiSdCyqic64qTs\",\"token_type\":\"Bearer\"}",
			"type": "string"
		},
		{
			"key": "providerConfigCredentialsOAuth2",
			"value": "{\"client_id\":\"oauth2_client_123\",\"client_secret\":\"oauth2_secret_456\",\"token_url\":\"https://api.test-provider.com/oauth/token\",\"scope\":\"read write\"}",
			"type": "string"
		},
		{
			"key": "providerConfigCredentialsAPIKey",
			"value": "{\"api_key\":\"api_key_123456789\",\"api_key_header\":\"X-API-Key\",\"timeout\":30}",
			"type": "string"
		},
		{
			"key": "providerConfigCredentialsBasic",
			"value": "{\"username\":\"testuser\",\"password\":\"testpass123\"}",
			"type": "string"
		},
		{
			"key": "providerConfigTimeout",
			"value": "30",
			"type": "string"
		},
		{
			"key": "providerConfigRetryCount",
			"value": "3",
			"type": "string"
		},
		{
			"key": "providerConfigRetryDelay",
			"value": "5",
			"type": "string"
		},
		{
			"key": "providerConfigRateLimit",
			"value": "1000",
			"type": "string"
		},
		{
			"key": "providerConfigRateLimitPeriod",
			"value": "3600",
			"type": "string"
		},
		{
			"key": "providerConfigMetadata",
			"value": "{\"environment\":\"production\",\"version\":\"1.0\",\"features\":[\"surcharge\",\"refund\",\"cancel\"]}",
			"type": "string"
		},
		{
			"key": "surchargeProviderCode",
			"value": "INTERPAYMENTS_PROD_001",
			"type": "string"
		},
		{
			"key": "surchargeProcessor",
			"value": "default",
			"type": "string"
		},
		{
			"key": "surchargeAmount",
			"value": "100.00",
			"type": "string"
		},
		{
			"key": "surchargeTotalAmount",
			"value": "100.00",
			"type": "string"
		},
		{
			"key": "surchargeCountry",
			"value": "USA",
			"type": "string"
		},
		{
			"key": "surchargeCampaign",
			"value": "[\"SUMMER2024\"]",
			"type": "string"
		},
		{
			"key": "surchargeData",
			"value": "[\"ECOMMERCE\"]",
			"type": "string"
		},
		{
			"key": "surchargeCorrelationId",
			"value": "",
			"type": "string"
		},
		{
			"key": "surchargeMerchantTransactionId",
			"value": "",
			"type": "string"
		},
		{
			"key": "surchargeCardToken",
			"value": "CARD_TOKEN_123",
			"type": "string"
		},
		{
			"key": "surchargeEntryMethod",
			"value": "KEYED",
			"type": "string"
		},
		{
			"key": "surchargeNonSurchargableAmount",
			"value": "0.00",
			"type": "string"
		},
		{
			"key": "surchargeFollowupAmount",
			"value": "150.00",
			"type": "string"
		},
		{
			"key": "surchargeFollowupTotalAmount",
			"value": "150.00",
			"type": "string"
		},
		{
			"key": "surchargeProviderTransactionId",
			"value": "",
			"type": "string"
		},
		{
			"key": "surchargeTransactionId",
			"value": "",
			"type": "string"
		},
		{
			"key": "surchargeStatus",
			"value": "",
			"type": "string"
		},
		{
			"key": "surchargeFollowupTransactionId",
			"value": "",
			"type": "string"
		},
		{
			"key": "surchargeFollowupMerchantTransactionId",
			"value": "",
			"type": "string"
		},
		{
			"key": "surchargeFollowupStatus",
			"value": "",
			"type": "string"
		},
		{
			"key": "refundReason",
			"value": "Customer request",
			"type": "string"
		},
		{
			"key": "cancelReason",
			"value": "Customer request",
			"type": "string"
		},
		{
			"key": "surchargeBinValue",
			"value": "411111",
			"type": "string"
		},
		{
			"key": "surchargePostalCode",
			"value": "78717",
			"type": "string"
		}
	]
}