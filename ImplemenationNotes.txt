  /* Important Notes on Implementation
  - We want to use API Access key instead of JWT token for the FeeNominalService (Done)
  - We want to swtich to using AWS Secret Manager to store the API Access Key  
  - We want to use the AWS SDK to get the API Access Key from the Secret Manager so research needed on how to do this
  - We want to make sure connection between DataCenter (GR2) for MerchantPortal->FeeNominalService->Interpayments is secure
  - We want to make sure connection between DataCenter (GR2) for XiPayWSServers->FeeNominalService->Interpayments is secure
  - We can ensure the first half this by making sure the API Access Key is not exposed and is accessed via VPC endpoints

  TODO:
  5/17/2025
  - Service provider tables Implementation (Done)
  - API Key Rotation Process
  - Error Handling in API Responses.
  - Merchant validation endpoints
  - Onboarding flow documentation.
  - Network timeouts to providers.
  - Make changes to code base to reflect all init.sql changes to 'id' fields. (Done)

  - Changes to Merchant addition:
    ok let me tell you a little about what i am thinking. So as i mentioned before, there is going to be  an on prem onboarding portal 
    that will register its own merchant to our FeeNominalService using onboarding endpoints. In the externalId we are going to pass 
    the merchantId field from that onboarding portal. Then there would be a generate button that will call 
    onboarding/initialApiKeyGenerate endpoint where in we should be just passin in externalId and a merchant Name and possibly a 
    unique merchantGUID that onboarding portal has tied to that externalId in its DB and then I think we should return a unique
    merchantGuid from FeeNominalService along with unique ApiKey and a secret to go with it along with other existing fields we 
    added support for already. 
  */

  /*With respect to supporting mulitple API Keys per single Merchant
  Based on your requirements, here's my opinion on implementing multiple API keys per merchant:

1. **Database Schema Changes Needed:**
```sql
-- Merchant table to store merchant information
CREATE TABLE merchants (
    id UUID PRIMARY KEY,
    merchant_id VARCHAR(50) UNIQUE,  -- External merchant ID from on-prem systems
    name VARCHAR(255),
    status VARCHAR(20),
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

-- API Keys table to store multiple keys per merchant
CREATE TABLE api_keys (
    id UUID PRIMARY KEY,
    merchant_id UUID REFERENCES merchants(id),
    key VARCHAR(255) UNIQUE,
    secret VARCHAR(255),
    description VARCHAR(255),
    rate_limit INTEGER,
    allowed_endpoints TEXT[],
    status VARCHAR(20),  -- ACTIVE, REVOKED, EXPIRED
    created_at TIMESTAMP,
    last_rotated_at TIMESTAMP,
    revoked_at TIMESTAMP,
    created_by VARCHAR(50),  -- Which on-prem service created this key
    external_reference_id VARCHAR(255)  -- Reference ID from on-prem system
);

-- API Key Usage table for audit and rate limiting
CREATE TABLE api_key_usage (
    id UUID PRIMARY KEY,
    api_key_id UUID REFERENCES api_keys(id),
    endpoint VARCHAR(255),
    request_count INTEGER,
    last_used_at TIMESTAMP
);
```

2. **Key Management Strategy:**
- Each API key should have a unique identifier within the merchant's scope
- Keys can be tagged with their purpose (e.g., "Surcharge Calculation", "Refund Processing")
- Keys can have different rate limits and endpoint permissions
- Keys can be created by different on-prem services

3. **API Key Generation Flow:**
```
On-Prem Service -> This Service
1. On-prem service calls with:
   - External merchant ID
   - Key purpose/description
   - Required permissions
   - External reference ID
2. This service:
   - Maps external merchant ID to internal merchant
   - Generates new API key
   - Stores with reference to on-prem system
   - Returns key details
```

4. **Authentication Flow:**
```
On-Prem Service -> This Service
1. On-prem service includes:
   - API Key
   - Merchant ID
   - Signature
2. This service:
   - Validates merchant exists
   - Finds API key for merchant
   - Validates key is active
   - Checks rate limits
   - Validates signature
```

5. **Key Features to Consider:**
- Key expiration dates
- Key rotation policies
- Usage tracking per key
- Different rate limits per key
- Different endpoint permissions per key
- Audit logging of key usage
- Key status tracking

6. **Security Considerations:**
- Each key should have its own secret
- Keys should be stored securely (AWS Secrets Manager)
- Keys should be rotated periodically
- Keys should be revocable individually
- Keys should have usage monitoring

7. **Integration Points:**
- On-prem onboarding portal
- SOAP web services
- Internal service authentication
- External service authentication

8. **Monitoring and Management:**
- Track key usage per merchant
- Monitor rate limit compliance
- Track key creation and revocation
- Audit key usage patterns
- Alert on suspicious activity

9. **Key States:**
- ACTIVE: Key is valid and can be used
- REVOKED: Key has been manually revoked
- EXPIRED: Key has reached its expiration date
- ROTATED: Key has been rotated (old version)

10. **Rate Limiting Strategy:**
- Per-key rate limits
- Per-merchant rate limits
- Per-endpoint rate limits
- Burst capacity handling

Would you like me to elaborate on any of these aspects or discuss specific implementation details?

  
  */

/*DB Tables so far

-- Merchants table
CREATE TABLE merchants (
    id UUID PRIMARY KEY,
    external_id VARCHAR(50) UNIQUE,  -- Merchant ID from onboarding portal
    name VARCHAR(255),
    status VARCHAR(20),
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    created_by VARCHAR(50)           -- Admin user ID from onboarding portal
);

-- API Keys table
CREATE TABLE api_keys (
    id UUID PRIMARY KEY,
    merchant_id UUID REFERENCES merchants(id),
    key VARCHAR(255) UNIQUE,  --Only store public key
    secret VARCHAR(255), ---DELETE This goes in AWS SEcrets Manger
    description VARCHAR(255),
    rate_limit INTEGER,
    allowed_endpoints TEXT[],
    status VARCHAR(20),
    created_at TIMESTAMP,
    last_rotated_at TIMESTAMP,
    revoked_at TIMESTAMP,
    created_by VARCHAR(50),          -- Admin user ID from onboarding portal
    onboarding_reference VARCHAR(50)  -- Reference ID from onboarding portal
);



*/

************************************************************************
6/25/2025 - Checkin notes 
************************************************************************
I'll analyze the conversation history from the past 24 hours and provide a comprehensive summary of all the changes made. Let me review the key modifications and improvements.

Search files...
Based on my analysis of the conversation history and codebase, here's a comprehensive summary of all the changes made in the past 24 hours:

## Summary of Changes Made in Past 24 Hours

### üîß **Major Feature Implementations**

#### 1. **Surcharge Provider Management System Overhaul**
- **RESTful URL Pattern**: Changed from `/api/v1/surcharge-providers` to `/api/v1/merchants/{merchantId}/surcharge-providers`
- **Merchant Isolation**: Implemented merchant-specific provider access control
- **X-Merchant-ID Header**: Added required header for all merchant-specific endpoints
- **Provider Code Uniqueness**: Changed from global uniqueness to merchant-specific uniqueness

#### 2. **Soft Delete Implementation**
- **Status-Based Deletion**: Replaced hard delete with soft delete using "DELETED" status
- **Restore Functionality**: Added restore endpoint to reactivate deleted providers
- **Database Migration**: Added "DELETED" status to surcharge_provider_statuses table
- **Repository Methods**: Added `SoftDeleteAsync` and `RestoreAsync` methods

#### 3. **Enhanced Credentials Schema System**
- **Comprehensive Validation**: Added field type validation (JWT, API_KEY, EMAIL, URL, etc.)
- **Configurable Settings**: Created `SurchargeProviderValidationSettings` for validation limits
- **Single API Call**: Implemented provider creation with configuration in one request
- **Credential Storage**: Enhanced secure credential storage with encryption

#### 4. **Configuration Management**
- **Provider Configurations**: Added support for multiple configurations per provider
- **Primary Config**: Implemented primary configuration concept
- **Usage Tracking**: Added success/error count and response time tracking
- **Metadata Support**: Added flexible metadata storage for configurations

### üõ°Ô∏è **Security Enhancements**

#### 1. **Authentication & Authorization**
- **Merchant Ownership Validation**: Ensured merchants can only access their own providers
- **X-Merchant-ID Validation**: Header must match URL parameter for merchant-specific endpoints
- **Enhanced Request Signing**: Updated signature calculation and validation
- **Role-Based Access**: Implemented proper authorization policies

#### 2. **Data Protection**
- **Merchant Isolation**: Complete data separation between merchants
- **Encrypted Credentials**: Secure storage of sensitive provider credentials
- **Audit Trail**: Comprehensive logging of all provider operations
- **Input Validation**: Enhanced validation for all input fields

### üóÑÔ∏è **Database & Infrastructure**

#### 1. **Database Schema Updates**
- **Missing Columns**: Added `average_response_time` and other missing columns
- **Foreign Key Relationships**: Fixed EF Core shadow property issues
- **Composite Unique Constraints**: Added (code, created_by) constraint for provider codes
- **Status Management**: Added "DELETED" status for soft delete functionality

#### 2. **Entity Framework Improvements**
- **Navigation Properties**: Fixed eager loading of Status and Configurations
- **Shadow Properties**: Resolved EF Core shadow property conflicts
- **Query Optimization**: Improved repository query performance
- **Type Consistency**: Fixed Guid vs string type mismatches

### üìö **Documentation & Testing**

#### 1. **API Documentation**
- **Updated Endpoint Documentation**: Comprehensive documentation for all new endpoints
- **Request/Response Examples**: Added detailed examples for all operations
- **Authentication Requirements**: Documented X-Merchant-ID header requirements
- **Error Handling**: Added comprehensive error response documentation

#### 2. **Postman Collection Updates**
- **New Endpoints**: Added all new surcharge provider endpoints
- **Environment Variables**: Updated with new provider configuration variables
- **Authentication Scripts**: Enhanced pre-request scripts for new authentication
- **Response Examples**: Added comprehensive response examples

### üîÑ **Service Layer Improvements**

#### 1. **Service Architecture**
- **Circular Dependency Resolution**: Fixed dependency injection issues
- **Validation Service**: Added `CredentialValidationService` for field validation
- **Configuration Service**: Enhanced `SurchargeProviderConfigService`
- **Error Handling**: Improved error handling and logging throughout

#### 2. **Repository Pattern Enhancements**
- **Include Statements**: Added proper eager loading for related entities
- **Query Optimization**: Improved database query performance
- **Type Safety**: Fixed type conversion issues between string and Guid
- **Error Logging**: Enhanced error logging and exception handling

### üéØ **Key Technical Achievements**

1. **Scalability**: Merchant-specific provider isolation allows for better scaling
2. **Security**: Comprehensive authentication and authorization system
3. **Maintainability**: Clean separation of concerns and proper dependency injection
4. **Flexibility**: Configurable validation and extensible configuration system
5. **Reliability**: Soft delete functionality and comprehensive error handling
6. **Performance**: Optimized database queries and eager loading

### ÔøΩÔøΩ **Files Modified/Created**

**Controllers:**
- `Controllers/V1/SurchargeProviderController.cs` - Complete overhaul

**Services:**
- `Services/SurchargeProviderService.cs` - Enhanced with new features
- `Services/SurchargeProviderConfigService.cs` - New service
- `Services/CredentialValidationService.cs` - New validation service

**Repositories:**
- `Repositories/SurchargeProviderRepository.cs` - Enhanced with soft delete
- `Repositories/SurchargeProviderConfigRepository.cs` - New repository
- `Repositories/ISurchargeProviderRepository.cs` - Updated interface
- `Repositories/ISurchargeProviderConfigRepository.cs` - New interface

**Models:**
- `Models/SurchargeProvider/` - Enhanced models with new properties
- `Models/Configuration/` - New configuration models

**Settings:**
- `Settings/SurchargeProviderValidationSettings.cs` - New validation settings

**Database:**
- Multiple migration files for schema updates
- Rollback scripts for all migrations

**Documentation:**
- `Docs/Endpoints/SurchargeProviderEndpoints.txt` - Complete rewrite
- `SurchargeCalcuilationDocumentation.md` - Major updates

**Testing:**
- `FeeNominalSurchargeCollection.json` - Updated Postman collection
- `FeeNominalSurcharge_env.json` - Updated environment variables

This represents a significant enhancement to the FeeNominalService, providing a robust, secure, and scalable surcharge provider management system with comprehensive merchant isolation and advanced configuration capabilities.

## üìã **Weekly Summary: FeeNominalService Changes**

### **1. üîê Security & Authentication Overhaul**
- Implemented merchant-specific access control with `X-Merchant-ID` header requirement
- Enhanced request signing with proper signature calculation (`timestamp|nonce|merchantId|apiKey`)
- Added merchant ownership validation for all surcharge provider operations
- Fixed security vulnerability where merchants could access other merchants' providers

### **2. üèóÔ∏è RESTful API Architecture Redesign**
- Migrated from `/api/v1/surcharge-providers` to `/api/v1/merchants/{merchantId}/surcharge-providers`
- Implemented proper resource-based URL patterns for better scalability
- Added comprehensive merchant isolation ensuring data separation between tenants
- Updated all endpoints to follow consistent RESTful conventions

### **3. üóÑÔ∏è Database & Data Management Enhancements**
- Implemented soft delete functionality with "DELETED" status instead of hard deletes
- Added restore capability for reactivating deleted providers
- Fixed EF Core shadow property issues and type mismatches (Guid vs string)
- Added missing database columns (`average_response_time`, `SurchargeProviderId`)
- Created composite unique constraints for provider codes per merchant

### **4. ‚öôÔ∏è Advanced Configuration & Validation System**
- Built comprehensive credentials schema validation with field type checking (JWT, API_KEY, EMAIL, URL)
- Implemented single API call provider creation with configuration
- Added configurable validation settings (`SurchargeProviderValidationSettings`)
- Created primary configuration concept with usage tracking and metadata support
- Enhanced credential storage with encryption and secure management

### **5. üîÑ Surcharge Model Evolution & Transaction System**
- **Deprecated** old `/api/v1/surchargefee/calculate` endpoints in favor of workflow-based approach
- **Introduced** new surcharge transaction model with `/api/v1/surcharge/auth`, `/api/v1/surcharge/refund`, `/api/v1/surcharge/void` endpoints
- **Implemented** direct integration with surcharge providers (like Interpayments) instead of simple fee calculation
- **Added** transaction storage and tracking in database with `SurchargeTransaction` model
- **Enhanced** provider configuration system to support actual API integrations rather than just fee calculations

**Impact**: Transformed FeeNominalService from a simple fee calculator into a comprehensive payment processing platform with proper multi-tenancy support, advanced configuration management, and direct provider integrations for real transaction processing.

Final list:
- SurchargeProvider related overhaul
	- Migrated from `/api/v1/surcharge-providers` to `/api/v1/merchants/{merchantId}/surcharge-providers`
	- Added comprehensive merchant isolation ensuring data separation between tenants
	- Implemented soft delete functionality with "DELETED" status instead of hard deletes
	- Added restore endpoint to restore a deleted provider
	- Implemented merchant-specific access control with `X-Merchant-ID` header requirement
	- Advanced Configuration & Validation System - Built comprehensive credentials schema validation with field type checking (JWT, API_KEY, EMAIL, URL)

- Initial Changes for Surcharge Model Evolution & Transaction System - MORE COMING SOON
	- **Deprecated** old `/api/v1/surchargefee/calculate` endpoints in favor of workflow-based approach
	- **Introduced** new surcharge transaction model with `/api/v1/surcharge/auth`, `/api/v1/surcharge/refund`, `/api/v1/surcharge/void` endpoints
	
