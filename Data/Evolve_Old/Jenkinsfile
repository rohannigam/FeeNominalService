pipeline {
    agent any

    environment {
        // Database Configuration
        DB_PORT = '5432'
        DB_NAME = 'fee_nominal'
        DB_SCHEMA = 'fee_nominal'
        EVOLVE_CLI_VERSION = '3.0.0'
        
        // Environment-specific hosts
        DEV_DB_HOST = 'dev-db.feenominal.local'
        STAGING_DB_HOST = 'staging-db.feenominal.local'
        PROD_DB_HOST = 'prod-db.feenominal.local'
    }

    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Target environment')
        choice(name: 'ACTION', choices: ['migrate', 'rollback'], description: 'Action to perform')
        string(name: 'TARGET_VERSION', defaultValue: '', description: 'Target version for rollback (leave empty for one step)')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                powershell '''
                    dotnet tool install --global Evolve.Cli --version ${EVOLVE_CLI_VERSION}
                    dotnet restore
                '''
            }
        }

        stage('Database Migration') {
            when {
                expression { params.ACTION == 'migrate' }
            }
            steps {
                script {
                    def dbHost = ""
                    def credentialsId = ""
                    
                    switch(params.ENVIRONMENT) {
                        case 'dev':
                            dbHost = env.DEV_DB_HOST
                            credentialsId = 'dev-db-credentials'
                            break
                        case 'staging':
                            dbHost = env.STAGING_DB_HOST
                            credentialsId = 'staging-db-credentials'
                            break
                        case 'prod':
                            dbHost = env.PROD_DB_HOST
                            credentialsId = 'prod-db-credentials'
                            break
                    }

                    withCredentials([usernamePassword(
                        credentialsId: credentialsId,
                        usernameVariable: 'DB_USER',
                        passwordVariable: 'DB_PASSWORD'
                    )]) {
                        def connectionString = "Host=${dbHost};Port=${DB_PORT};Database=${DB_NAME};Username=${DB_USER};Password=${DB_PASSWORD};SearchPath=${DB_SCHEMA}"
                        def logFile = "migration-${params.ENVIRONMENT}-$(Get-Date -Format 'yyyyMMdd-HHmmss').log"
                        
                        powershell """
                            evolve migrate -c '${connectionString}' -l migrations/${params.ENVIRONMENT}/up 2>&1 | Tee-Object -FilePath ${logFile}
                            Write-Host "Migration log saved to ${logFile}"
                        """
                    }
                }
            }
        }

        stage('Database Rollback') {
            when {
                expression { params.ACTION == 'rollback' }
            }
            steps {
                script {
                    def dbHost = ""
                    def credentialsId = ""
                    
                    switch(params.ENVIRONMENT) {
                        case 'dev':
                            dbHost = env.DEV_DB_HOST
                            credentialsId = 'dev-db-credentials'
                            break
                        case 'staging':
                            dbHost = env.STAGING_DB_HOST
                            credentialsId = 'staging-db-credentials'
                            break
                        case 'prod':
                            dbHost = env.PROD_DB_HOST
                            credentialsId = 'prod-db-credentials'
                            break
                    }

                    withCredentials([usernamePassword(
                        credentialsId: credentialsId,
                        usernameVariable: 'DB_USER',
                        passwordVariable: 'DB_PASSWORD'
                    )]) {
                        def connectionString = "Host=${dbHost};Port=${DB_PORT};Database=${DB_NAME};Username=${DB_USER};Password=${DB_PASSWORD};SearchPath=${DB_SCHEMA}"
                        def logFile = "rollback-${params.ENVIRONMENT}-$(Get-Date -Format 'yyyyMMdd-HHmmss').log"
                        
                        powershell """
                            .\\rollback.ps1 -Environment ${params.ENVIRONMENT} -ConnectionString '${connectionString}' -TargetVersion '${params.TARGET_VERSION}' 2>&1 | Tee-Object -FilePath ${logFile}
                            Write-Host "Rollback log saved to ${logFile}"
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            archiveArtifacts artifacts: "migration-${params.ENVIRONMENT}-*.log,rollback-${params.ENVIRONMENT}-*.log", allowEmptyArchive: true
        }
        failure {
            script {
                def dbHost = ""
                def credentialsId = ""
                
                switch(params.ENVIRONMENT) {
                    case 'dev':
                        dbHost = env.DEV_DB_HOST
                        credentialsId = 'dev-db-credentials'
                        break
                    case 'staging':
                        dbHost = env.STAGING_DB_HOST
                        credentialsId = 'staging-db-credentials'
                        break
                    case 'prod':
                        dbHost = env.PROD_DB_HOST
                        credentialsId = 'prod-db-credentials'
                        break
                }

                withCredentials([usernamePassword(
                    credentialsId: credentialsId,
                    usernameVariable: 'DB_USER',
                    passwordVariable: 'DB_PASSWORD'
                )]) {
                    def connectionString = "Host=${dbHost};Port=${DB_PORT};Database=${DB_NAME};Username=${DB_USER};Password=${DB_PASSWORD};SearchPath=${DB_SCHEMA}"
                    def logFile = "error-${params.ENVIRONMENT}-$(Get-Date -Format 'yyyyMMdd-HHmmss').log"
                    
                    powershell """
                        Write-Host "Error occurred during ${params.ACTION}" | Tee-Object -FilePath ${logFile}
                        Get-Content evolve_changelog.log -ErrorAction SilentlyContinue | Tee-Object -FilePath ${logFile} -Append
                    """
                }
            }
            archiveArtifacts artifacts: "error-${params.ENVIRONMENT}-*.log", allowEmptyArchive: true
        }
        always {
            cleanWs()
        }
    }
} 